function E = BoundaryFromCluster(E, C, n)        if n  > 1 && length(C.next) >= n-1        C = C.next{n-1};    endif ~isempty(C) %for older matlabs    f = fields(C);    for j = 1:length(f)        E.(f{j}) = C.(f{j});    endendif isfield(C,'space')    E.pcplot = C.space(2:end);endif isfield(C,'y')    y = C.y;elseif isfield(E,'pos')    l = abs(diff(E.pos([1 3])) + i * diff(E.pos([2 4])));    y = [-l/2 l/2];elseif isfield(C,'len')    l = C.len;    y = [-l/2 l/2];elsey = [-1 1];endif ~isfield(C,'shape')    E.shape = 1;    E.ctype = 1;    return;endif C.shape == 3 %an auto cut with no boundary    return;endif C.shape == 2 %line in ND space    if C.auto == 2        return;    end    if ~isfield(C,'angle')        C.angle = 0;    endE.xyr(1) = C.crit(1) .* cos(-C.angle);E.xyr(2) = C.crit(1) .* sin(-C.angle);exy = xyrotate([C.crit(1) C.crit(1)],y,-C.angle);E.pos(1) = exy(1,1);E.pos(2) = exy(1,2);E.pos(3) = exy(2,1);E.pos(4) = exy(2,2);elseif C.shape == 1 %line in    if ~isfield(C,'crit')        exy = xyrotate(C.pos([1 3]),C.pos([2 4]),C.angle);        C.crit = exy(1,1);    endE.xyr(1) = C.crit(1) .* cos(-C.angle);E.xyr(2) = C.crit(1) .* sin(-C.angle);exy = xyrotate([C.crit(1) C.crit(1)],y,-C.angle);E.pos(1) = exy(1,1);E.pos(2) = exy(1,2);E.pos(3) = exy(2,1);E.pos(4) = exy(2,2);elseif isfield(C,'xyr')    E.pos(1) = C.xyr(1) - C.xyr(3);    E.pos(2) = C.xyr(2) - C.xyr(4);    E.pos(3) = C.xyr(1)+ C.xyr(3);    E.pos(4) = C.xyr(2) +C.xyr(4);    E.xyr = C.xyr;else    E.pos = C.pos;endangle = atan(diff(E.pos([1 3]))/diff(E.pos([2 4])));if isfield(C,'sign')    E.sign = C.sign;else    E.sign = 0;endif isfield(C,'shape')    E.shape = C.shape;    if ~isfield(C,'space')        mycprintf('red','Missing Space for Cluster - Guessing!!!\n')        C.space = [3 1 8];    end    if C.shape == 2        E.space = C.space;    elseif C.shape == 1 %% not sure if this needs difffernt treatment        E.space = C.space;    else         E.space = C.space;    endendif ~isfield(E,'h')    E.h = [];endif ~isfield(E,'shape')    E.shape = 1;endif isfield(C,'next')    for j = 1:length(C.next)        if isfield(C.next{j},'shape') %not empyt or just meanspike            C.next{j} = rmfields(C.next{j},'next'); %in case old/error        E.next{j} = AllV.BoundaryFromCluster([],C,1+j);        else        E.next{j} = [];        end    endendE.ctype = 1;E.endtime = now;