function [DATA, DataClusters, success] = LoadTrigTimes(DATA, checktimes, varargin)%[DATA, DataClusters, success] = LoadTrigTimes(DATA, checktimes, varargin)%load clusterdetails,  and find ids for trigger times for probes listed in%checntimes)tic;    forcecheck = 0;    clst = {};    p = DATA.probe(1);    savexy = 0;    success = 0;    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'savexy',6)            savexy = 1;        end        j = j+1;    end        fprintf('Loading Trigger times.....');    if ~isfield(DATA,'trigcheck') || forcecheck        DATA.trigcheck = zeros(1,DATA.nprobes);    end    if max(checktimes) > length(DATA.trigcheck)        DATA.trigcheck(max(checktimes)) = 0;    end    np = length(DATA.trigcheck);    if np < DATA.nprobes        DATA.trigcheck(np+1:DATA.nprobes) = 0;    end    DataClusters = AllV.mygetappdata(DATA,'Clusters');    [DATA, ClusterDetails] = AllV.LoadClusterDetails(DATA,'orauto');    p = AllV.ProbeNumber(DATA);    if DATA.interactive >= 0 && ismember(p, checktimes)        if sum(DATA.trigcheck(checktimes) ==0) == 0 && DATA.interactive > 0  && DATA.loadedClusterDetails && isappdata(DATA.toplevel,'ClusterDetails');            Vall = AllV.mygetappdata(DATA,'Vall');            DATA.xy{1} = ClusterDetails{DATA.probe(1)}.xy;            DATA.clst = ClusterDetails{DATA.probe(1)}.clst;            DATA.trigtimes{p} = find(ismember(Vall.t,trigtimes{j},ClusterDetails{p}.t));            fprintf('preloaded\n');            success = 1;            return;        end    else        DataClusters = AllV.LoadDataClusters(DATA);    end        xys = {};    for j = 1:length(ClusterDetails)        if isfield(ClusterDetails{j},'t')            xys{j} = ClusterDetails{j}.xy;            if isfield(ClusterDetails{j},'clst')                if diff(size(ClusterDetails{j}.clst)) > 0                    ClusterDetails{j}.clst = ClusterDetails{j}.clst';                end                clst{j} = ClusterDetails{j}.clst;            else                clst{j} = ones(length(ClusterDetails{j}.t),1);            end            trigtimes{j} = ClusterDetails{j}.t;                    end    end    if length(clst) >= p && ismember(p,checktimes) %only reload clst if this is inlist        %otherwise can overwrite latest cut        DATA.clst = clst{p};        if isfield(DataClusters{p},'xtimes') & ~isempty(DataClusters{p}.next) & ~isempty(DataClusters{p}.next{1})            id = find(ismember(trigtimes{p},DataClusters{p}.xtimes{1}));            DATA.clst(id) = 3;            DATA.usedxtimes = 1;        end    end    if length(xys) < p %Couldnt load thie probe        return;    endif strncmp(DataClusters{p}.clusterprog,'AllVPcs',7) && isfield(DataClusters{p},'progversion')    progversion = DataClusters{p}.progversion;else    progversion = 100;end%Usually if Clustershas an Evec structure, its an error. Only use it if its newer%But if versions before 1.11 if if forceevec was set, the Evec used for%calculating was in Clusters, while CluserDetails got new Evec%lemM239 Expt20 P 3 wants Clusters.Evec even though no field forceevec.%?why    if isfield(ClusterDetails{p},'Evec') %% can get Evec in Clusters that is different. ? how?         if isfield(DataClusters{p},'Evec')            if isfield(DataClusters{p}.Evec,'calctime') && DataClusters{p}.Evec.calctime > ClusterDetails{p}.ctime                DataClusters{p}.Evec = ClusterDetails{p}.Evec;            elseif (~isfield(DataClusters{p},'forceevec') || DataClusters{p}.forceevec ==0) && progversion < 1.11                DataClusters{p}.Evec = ClusterDetails{p}.Evec;                            else            end        else            DataClusters{p}.Evec = ClusterDetails{p}.Evec;        end        if ~isfield(DataClusters{p}.Evec,'chspk')             cprintf('blue','probe %d Evec missing chspk\n',p);            if isfield(DataClusters{p},'chspk')                DataClusters{p}.Evec.chspk = DataClusters{p}.chspk;            end        end    end    DATA.xy{1} = xys{p};    if savexy        DATA = AllV.mysetappdata(DATA,'ClusterDetails',ClusterDetails);        DATA.loadedClusterDetails = DATA.exptno;    end        Vall = AllV.mygetappdata(DATA,'Vall');    if isempty(checktimes)        DATA.trigtimes{DATA.probe(1)} = trigtimes{p};    end%DATA.trigtimes only has times converted to indexes in the FullV array    for j = checktimes;        redo = 0;        if j > length(DATA.trigtimes) || length(DATA.trigtimes{j}) == 0            redo = 1;        elseif length(DATA.trigtimes{j}) ~= length(trigtimes{j})            redo = 1;            DATA = AllV.AddErr(DATA,'Probe %d Trigtime mismatch\n',j);        end        if DATA.trigcheck(j) == 0 || forcecheck || redo            DATA.trigtimes{j} = find(ismember(Vall.t,trigtimes{j}));            DATA.trigcheck(j) = 1;            if length(DATA.trigtimes{j}) < length(trigtimes{j})                id = find(ismember(trigtimes{j},Vall.t(DATA.trigtimes{j})));                if DATA.probe(1) == j                DATA.clst = DATA.clst(id);                DATA.xy{1} = DATA.xy{1}(id,:);                end            end        end    end    if ~isempty(DATA.xy{1})    success = 1;    end    fprintf('....Done\n');toc    