 function [C, fits] = OptimizeEllipse(DATA)     c = DATA.currentcluster;     state.cluster = c;     if DATA.currentcluster > 1         guess(1:4) = DATA.cluster.next{c-1}.xyr;         guess(5) = DATA.cluster.next{c-1}.angle;%         guess(5) = 0;  %DATA.xy{} is rotated by ellipse angle already         if isfield(DATA.cluster.next{c-1},'aspectratio')             state.aspectratio = DATA.cluster.next{c-1}.aspectratio;         else             state.aspectratio = 1;         end         C = DATA.cluster.next{c-1};     else         C = DATA.cluster;         guess(1:4) = DATA.cluster.xyr;         guess(5) = DATA.cluster.angle;%         guess(5) = 0;  %DATA.xy{} is rotated by ellipse angle already         if isfield(DATA.cluster,'aspectratio')             state.aspectratio = DATA.cluster.aspectratio;         else             state.aspectratio = 1;         end     end     C.y = minmax(DATA.xy{c});setappdata(DATA.toplevel,'fitparams',[]);setappdata(DATA.toplevel,'fithists',[]);if isfield(DATA,'optimizemode')    state.type = DATA.optimizemode;else    state.type = 'fitdprime';endmaxiter = 100;state.mintype = 1; %eucliean sum to weight smallerstate.mintype = 2; %use whichever is smalleststate.mintype = 3;state.initialar = guess(4)./guess(3);state.rx = guess(3);state.ry = guess(4);state.angle = guess(5);guess = guess([1:3 5]);%guess = guess([1 2]);options = optimset('MaxFunEvals',100000,'maxiter',maxiter,'display','off');if strcmp(DATA.refinemode,'full')    dipguess = AllV.MinimiseEllipseDip(C, DATA);    [dpb, bfits] = AllV.MinimiseEllipseb(dipguess, DATA,state);    [dpa, afits] = AllV.MinimiseEllipseb(guess, DATA,state);    if dpb < dpa        fprintf('Changing starting X,Y\n');        guess = dipguess;    end    nloop = 0;    while min(afits.r) > 1 && nloop < 10 %no events in cluster        cc = mean(DATA.xy{state.cluster});        dvec = guess(1:2)-cc;        guess(1:2) = guess(1:2)-dvec * min(afits.r)/4;        [dpa, afits] = AllV.MinimiseEllipseb(guess, DATA,state);        nloop = nloop + 1;    endelse    [dp, fits] = AllV.MinimiseEllipseb(guess, DATA,state);end[fittedparams,fval,exitflag, output] = fminsearch(@AllV.MinimiseEllipseb,guess,options,DATA,state);state.finished = 1;[dp, fits] = AllV.MinimiseEllipseb(fittedparams, DATA,state);if length(guess) == 2    C.xyr(1:2) = fittedparams(1:2);elseif length(guess) == 4    C.xyr = fittedparams(1:4);    C.xyr(4) = C.xyr(3).*state.initialar;    C.angle = fittedparams(4);else    C.xyr = fittedparams(1:4);    C.angle = fittedparams(5);end