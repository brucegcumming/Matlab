function DATA = AddError(DATA, varargin)%DATA = AddError(DATA, varargin) prints an error and adds it to DATA struct%passes varargin to sprintf, printf the resulting string in red, and adds% it to a cell string array DATA.errssilent = 0;eid =0;pid = 0;skipvar = [];errfile = [];if isfield(DATA,'verbose')    if DATA.verbose < 0        return;    elseif DATA.verbose == 0        silent =1;    endendj = 1;while j <= length(varargin)    if strcmp(varargin{j},'-silent')        silent = 1;        skipvar(end+1) = j;    elseif strcmp(varargin{j},'-show')        silent = 0;        skipvar(end+1) = j;    elseif strcmp(varargin{j},'-write') %add to a disk file        skipvar(end+1) = j;        j = j+1;        skipvar(end+1) = j;        errfile = varargin{j};    end    j = j+1;endskiparg = varargin(skipvar);varargin = varargin(setdiff(1:length(varargin),skipvar));if isempty(varargin)     if silent == 0 %show errors        ShowErrors(DATA);    else        fprintf('AddError: No input args\n');    end    return;endif iscellstr(varargin{1})    strs = varargin{1};    for j = 1:length(strs)        DATA = AddError(DATA, strs{j}, skiparg{:});    end    returnend    s = sprintf(varargin{:});    s = strrep(s,'\','\\');    s = strrep(s,'\\\\','\\');    if ~isfield(DATA,'errs') && ~isfield(DATA,'errmsg')        DATA.errs = {};    end    if ~isfield(DATA,'errdata')        DATA.errdata = [];    end    if isfield(DATA,'exptno')        eid = DATA.exptno;    end    if isfield(DATA,'probe')        pid = DATA.probe;    end    if isfield(DATA,'program')        newerr.program = DATA.program;    end    newerr.s = s;        if silent == 0        if isfield(newerr,'program')            fprintf('%s: ',newerr.program);        end        mycprintf('red','%s\n',s);    end    if isfield(DATA,'errmsg')        DATA.errmsg = {DATA.errmsg{:} s};        n = length(DATA.errmsg);    elseif isstruct(DATA.errs)        DATA.errs(end+1).msg = s;        n = length(DATA.errs);    else        DATA.errs = {DATA.errs{:} s};        n = length(DATA.errs);    end    if isfield(DATA,'errdata')        DATA.errdata(n).time = now;        if eid            DATA.errdata(n).expt = eid;        end        if pid            DATA.errdata(n).probe = pid;        end        DATA.errdata = CopySFields(DATA.errdata,n,rmfield(newerr,'s'),'program');    end    if ~isempty(errfile)    if exist(errfile)        X = load(errfile);    else        X.Errors = {};    end    newerr.time = now;    newerr.eid = eid;    if isfield(X,'Errors')        X.Errors{end+1}= newerr;    elseif isfield(X,'errs')        X.errs{end+1}= newerr;    end    save(errfile,'-struct','X');end        function ShowErrors(DATA)if isfield(DATA,'errs')    idstr = [];    if isfield(DATA,'ex') && length(DATA.ex) == 1        idstr = sprintf('%sE%d',idstr,DATA.ex);    end    if isfield(DATA,'p') && length(DATA.p) == 1        idstr = sprintf('%sP%d',idstr,DATA.p);    end    errs = unique(DATA.errs);    for j = 1:length(errs)        fprintf('%s%s\n',idstr,deblank(errs{j}));    endendif isfield(DATA,'errorlist')    for j = 1:length(DATA.errorlist)        ShowErrors(DATA.errorlist(j));    endend