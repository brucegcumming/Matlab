function [E, cluster] = CutAndSave(DATA, varargin)    nosave = 0;    savetomain = 0;    args = {};    nameargs = {'auto'};    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'nosave',4)            nosave = 1;        elseif strncmpi(varargin{j},'savemain',4)            savetomain = 1;            nameargs = {};        else            args = {args{:} varargin{j}};        end        j = j+1;    end    if strcmp(DATA.autocutmode,'james')        [DATA, D]   = AllV.JamesAutoCut(DATA,'retrigger');        [AllVoltages, DATA] = AllV.BuildAllV(DATA, D.spk_inds', D.params.spk_pts);        outname = AllV.ClusterFile(DATA.name,DATA,'auto');        C = AllV.PlotTriggerHist(DATA,DATA.cluster);        if(0)            AllV.JamesAutoCut(DATA, 'reapply', C);        end        fprintf('Auto Cut %d events\n',max(DATA.uid));        DATA.savespikes = 1; %get the spikdi at least        DATA =  AllV.SaveClusters(DATA, outname,'quick');        cluster = C;        C.spkfile = AllV.SpkFileName(DATA,'auto');        E = C;        if ~exist(C.spkfile)            AllV.SaveSpikes(DATA,DATA.uid,C.spkfile);        end        DATA.savespikes = 0; %don't overwrite real spikes        set(DATA.toplevel,'UserData',DATA);        return;    end    if strncmp(DATA.autocutmode,'ecker',5)        Vall = AllV.mygetappdata(DATA,'Vall');        if strcmp(DATA.autocutmode,'eckerquick')            [DATA, D]   = AllV.EckerAutoCut(DATA,'quick');        else            [DATA, D]   = AllV.EckerAutoCut(DATA);            DATA.moretrigger = 0;            [R, DATA] = NeedRetrigger(DATA);            TriggerHistory(1).nspks = DATA.cluster.nspks;            TriggerHistory(1).Trigger = DATA.Trigger;            TriggerHistory(1).Details = R;            while R.need > 0                DATA.spkrate = DATA.spkrate+50;                [id, DATA] = AllV.Retrigger(DATA);                [AllVoltages, DATA] = AllV.BuildAllV(DATA, id, DATA.spts);                DATA = AllV.FinishNewData(DATA);                DATA.clst = ones(size(id));                DATA.uid = 1:length(DATA.clst);                DATA.t =  Vall.t(id);                DATA = AllV.SetTemplateData(DATA,1,'force'); %recalc                DATA.pcs = [];                DATA = AllV.SetPCs(DATA,0,0);                [DATA, D] = AllV.EckerAutoCut(DATA);                DATA.cluster.triggerparams.nretrigger = DATA.moretrigger;                [R, DATA] = NeedRetrigger(DATA);                TriggerHistory(end+1).nspks = DATA.cluster.nspks;                TriggerHistory(end).Trigger = DATA.Trigger;                TriggerHistory(end).Details = R;            end            if R.need == -1                DATA.cluster.comment = '?MU is classified as SU';            end        end        outname = AllV.ClusterFile(DATA.name,DATA,'auto');        DATA.cluster.TriggerHistory = TriggerHistory;        C = DATA.cluster;        E = C;        fprintf('Auto Cut %d events\n',max(DATA.uid));        if nosave == 0            DATA =  AllV.SaveClusters(DATA, outname,'quick');            cluster = C;            C.spkfile = AllV.SpkFileName(DATA,'auto');            E = C;            if ~exist(C.spkfile)                DATA.savespikes = 1; %get the spikdi at least                AllV.SaveSpikes(DATA,DATA.uid,C.spkfile);            end        end        DATA.savespikes = 0; %don't overwrite real spikes        set(DATA.toplevel,'UserData',DATA);        cluster = C;        return;    end     [E, Scores, tmpdips, xy, details] = AllV.AutoCut(DATA, args{:});    DataClusters = AllV.mygetappdata(DATA,'Clusters');    if details.pctook > DATA.pcfit.took * 1.1        fprintf('PC fits %.2f vs %.2f\n',details.pctook, DATA.pcfit.took);    end    if ~isempty(Scores) && (~isfield(DATA,'TemplateScores') || E.plottype == 3)        DATA.TemplateScores = Scores;        DATA.tmpdips = tmpdips;    elseif E.newscores        DATA = get(DATA.toplevel,'UserData');    end    if E.angle ~= 0 %auto rotation caused by 1d/2d mismatch        DATA.xy{1} = xyrotate(xy(:,1),xy(:,2),E.angle);    else    DATA.xy{1} = xy;    end    DATA.ndxy = xy;    DATA.cboundary = E;    if AllV.IsTemplateCut(E)        DATA.plottype = 3;    else        DATA.plottype = E.plottype;    end    if DATA.watchplots%    AllV.PlotHistogram(DATA,E); %should be called in Classifyspikes    end    [cl, DATA.cluster, DATA.xy{1}] = AllV.ClassifySpikes(DATA,E);    DATA.cluster.auto = 1;        DATA.cluster.autocutmode = DATA.autocutmode;    if  ~isfield(DATA.cluster,'dropi')        fprintf('no dropi calculated');    end    DATA.clid = cl.id;    DATA.nid = cl.nid;    DATA.clst = cl.clst;    DATA.MeanSpike = cl.MeanSpike';    DATA.cluster.MeanSpike = DATA.MeanSpike;    DATA.cluster.errs = DATA.errs;    DATA.cluster.starttime = DATA.cstarttime;    if isfield(DATA.Expt.Header,'ReadMethod')        DATA.cluster.exptreadmethod = DATA.Expt.Header.ReadMethod;    else        DATA.cluster.exptreadmethod = 0;    end    % don't watndot do this unless saving, in which case its done below% This wipes out fields like savetimes%    DATA.Clusters{DATA.probe(1)} = DATA.cluster;            if nosave == 0        outname = AllV.ClusterFile(DATA.name,DATA,nameargs{:});        DATA =  AllV.SaveClusters(DATA, outname);        if length(DATA.savespkid) > length(DATA.xy{1})            fprintf('Save Spike Mismatch %d vs %d\n',length(DATA.savespkid),length(DATA.xy{1}));        end        if DATA.savespikes            AllV.SaveSpikes(DATA,DATA.savespkid,AllV.SpkFileName(DATA));        end    else            id = find(cl.clst(DATA.uid) > 1);% ClusterDetails records all event times, and the classification (clst)%Clusters just has the times of the classified  events = smallest file ffor%combine        DataClusters{DATA.probe(1)}.times = DATA.t(DATA.uid(id));    end    set(DATA.toplevel,'UserData',DATA);    cluster = DATA.cluster;        function [R, DATA]  = NeedRetrigger(DATA,D)R.need = 0;p = DATA.probe(1);if strcmp(DATA.cluster.autocutmode,'ecker')   E = DATA.cluster.eckercluster;   R.SU = E.SU;   R.dropi = E.dropi;   R.amplitudes = E.amplitudes;   R.isolation = E.isolation;   dropping = (E.SU' == 1 & E.dropi(:,3) < 1.5 & E.amplitudes(:,p) > 0.6);   cid = find(E.isolation(:,1)' > 2.7);   R.need = sum(dropping(cid));%if there is more than one cluster (ie 1 + hash) that comes from this probe%and all of thess are considered SU, don't lower the threshold if only one%is dropping - its probably MU   aid = find(E.amplitudes(:,p) > 0.6); %Clusters not just on other probes   if R.need == 1 && length(aid) > 1 && sum(E.SU(aid) ==0) == 0 && sum(dropping(aid)) == 1       R.need = -1;   end   DATA.moretrigger = DATA.moretrigger+1;endif DATA.moretrigger > 2    R.need = -3;    return;endif length(DATA.rV)./DATA.duration > 250    R.need = -2;    return;end