function res = FitGaussMeans(X,N, varargin)% res = FitGaussMeans(X,N, varargin) do Gaussian mixture fit to X% using N components    verbose = 0;    S = [];    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'verbose',4)            verbose = 1;            if length(varargin) > j && isnumeric(varargin{j+1})                j = j+1;                verbose = j;            end        elseif strncmpi(varargin{j},'clusterid',9)            j = j+1;            id = varargin{j};            nid = setdiff(1:size(X,1),id);            if length(nid) > 1 && length(id) > 1                S.mu(1,:) = mean(X(id,:),1);                S.mu(2,:) = mean(X(nid,:),1);                S.Sigma(:,:,1) = cov(X(id,:));                S.Sigma(:,:,2) = cov(X(nid,:));                S.PComponents(1) = length(id)./size(X,1);                S.PComponents(2) = length(nid)./size(X,1);            end        end        j = j+1;    end    try        if isempty(S)            G = gmdistribution.fit(X,N,'Options',statset('MaxIter',1000));        else            G = gmdistribution.fit(X,N,'Options',statset('MaxIter',1000),'Start',S);        end    res.obj = G;    distance = AllV.gmdistance(G);    for j = 1:size(G.Sigma,3)    sigmas(j) = sqrt(sum(diag(G.Sigma(:,:,j)))); %var for this dimemsion    end    nsd = diff(G.mu)./sigmas;    dprime = sqrt(sum(nsd.^2));    res.mahal = distance;    res.dprime = dprime;    id = cluster(G,X);    [res.lratio, res.isolation_distance] = AllV.CalcLRatio(X,G, id);        if verbose >1        fprintf('Distance %.2f (%.2f)\n',distance,dprime);    end    catch        res.mahal = 0;        res.dprime = 0;        res.obj.mu = zeros(size(X,2),N);        res.obj.Converged = -1;    end                