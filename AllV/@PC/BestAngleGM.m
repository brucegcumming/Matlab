 function [theta, c, details] = BestAngleGM(xy, G, dipfit, varargin)%% Find best angle to cut in a 2D space, using 1-D Gaussian Mixtures% if quickmode ==1, uses a 2-D fit to the data, clusters, then finds the% angle that maximize s dptime between the cluters.   quickmode = 0;  a = 0:pi/36:pi;j = 1;while j <= length(varargin)    if strncmpi(varargin{j},'quick',5)        quickmode = 1;    end    j = j+1;end  if isempty(G)      G = GMFit(xy,2,1);  end  id = cluster(G, xy);  cid = find(id > 1);  nid = find(id == 1);  if isempty(dipfit)      [dip, dipfit] = GMDip(xy,[],'idlist',id);  end  if quickmode      bestfit = [];      if dipfit.sign >= 0          acid = xy(:,1) > dipfit.dip(1);          anid = xy(:,1) < dipfit.dip(1);      else          acid = xy(:,1) < dipfit.dip(1);          anid = xy(:,1) > dipfit.dip(1);      end  end    c = 0;  for j = 1:length(a)      XY = xyrotate(xy(:,1),xy(:,2),a(j));      if quickmode          details.d(j) = abs(CalcDprime(XY(cid,1),XY(nid,1)));          details.oned(j) = abs(CalcDprime(XY(acid,1),XY(anid,1)));      else          [aa,bb] = GMDip(XY,[],'idlist',id);          details.d(j) = bb.mahal(bb.best);          details.dprime(j) = CalcDprime(XY(cid,1),XY(nid,1));          if details.d(j) > c              c = details.d(j);              bestfit = bb.G{bb.best};              crit = mean(bb.dip);          end      end  end  if quickmode      [cs(1), js(1)] = max(details.oned);      XY = xyrotate(xy(:,1),xy(:,2),a(js(1)));      [aa,bs{1}] = GMDip(XY,[],'idlist',id);      q(1) = bs{1}.mahal(bs{1}.best);      [cs(2), js(2)] = max(details.d);      XY = xyrotate(xy(:,1),xy(:,2),a(js(2)));      [bb,bs{2}] = GMDip(XY,[],'idlist',id);      q(2) = bs{2}.mahal(bs{2}.best);      q(3) = dipfit.mahal(dipfit.best);      js(3) = 1;      bs{3} = dipfit;      [aa,b] = max(q);      c = q(b); %best mahal distance      theta = a(js(b));      bestfit = bs{b}.G{bs{b}.best};      details.besti = js(b);      details.crit = mean(bs{b}.dip)  else  [c, j] = max(details.d);  details.besti = j;  theta = a(j);  details.crit = crit;  end    details.angles = a;  details.gmfit = bestfit;      details.xy = xyrotate(xy(:,1),xy(:,2),theta);      details.dip = HartigansDipTest(sort(details.xy(:,1)));