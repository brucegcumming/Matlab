function C = ClassifySpikes(DATA, E, mode)    C = [];    if E.shape < 0 && ~strcmp(mode,'flip')        cprintf('blue','Can''t Classify Spikes until set cluster\n');        return;    end    Clusters = getappdata(DATA.toplevel,'Clusters');    e = DATA.currentpoint(1);    p = DATA.currentpoint(2);    if isfield(DATA,'NewCut') && DATA.NewCut.probe == p && DATA.NewCut.exptid == e        C = DATA.NewCut;    else        C = Clusters{e}{p};    end    C.exptid = e;    if E.shape < 0 || strcmp(mode,'flip') %no mouse input - just flipping        E = C;        E.mode = 3;    end    C.cluster = E.cluster;    if E.cluster > 1        nx = E.cluster-1;%set something in next{nx} to be sure it exists        C.next{nx}.aspectratio = E.aspectratio;        if isfield(C.next{nx},'xy')            xy = C.next{E.cluster-1}.xy;        elseif isfield(E,'xyspace') && E.xyspace > 0            C.next{nx} = C.next{E.xyspace};            C.next{nx}.cluster = nx+1;            xy = C.next{E.xyspace}.xy;        else            C.next{nx} = CopyFields(C.next{nx},C,{'space' 'TemplateUsed'});            xy = C.xy;        end        C.next{nx}.aspectratio = E.aspectratio;        C.next{nx}.shape = E.shape;        C.next{nx}.ctime = now;    else        xy = C.xy;        C.shape = E.shape;        C.aspectratio = E.aspectratio;        C.ctime = now;    end        if ~isfield(DATA,'Expt')        Expts = getappdata(DATA.toplevel,'Expts');        DATA.Expt = Expts{e};    end    if E.shape == 0 % ellipse        cx = E.xyr(1);        cy = E.xyr(2);        rx = E.xyr(3);        ry = E.xyr(4);        if isfield(E,'aspectratio') & E.aspectratio > 0            xys = xyrotate(xy(:,1)-cx,(xy(:,2)-cy) ./E.aspectratio,E.angle);            r = ((xys(:,1))./rx).^2 + ((xys(:,2))./(ry./E.aspectratio)).^2;        else            xys = xyrotate(xy(:,1)-cx,xy(:,2)-cy,E.angle);        r = ((xys(:,1))./rx).^2 + ((xys(:,2))./ry).^2;        end        id = find(r < 1);        nspk = length(id);        C.clst(id) = E.cluster+1;        if diff(size(C.clst) >0)            C.clst = C.lst';        end        id = find(r >=1 & C.clst == E.cluster+1);        C.clst(id) = 1;        PC.PlotClusterPoints(C,[],E.cluster,'xydata',xy);        PC.FinishXYPlot(gca, DATA, C.exptid,C.probe(1));        if E.cluster > 1            n = E.cluster-1;            C.next{n}.xyr = E.xyr;            C.next{n}.angle = E.angle;%            C.next{n}.crit = 0;            C.next{n}.pos = E.pos;            PC.DrawEllipse(E,'color',DATA.colors{n+2});        else            C.xyr = E.xyr;            C.angle = E.angle;            PC.DrawEllipse(E,'color','r');        end        if ~isfield(C,'crit')            C.crit = 1;        end    elseif E.shape == 1        if E.mode == 3 || strcmp(mode,'flip') %invert sign            C.sign = C.sign * -1;        end        E.angle = atan(diff(E.pos([1 3]))/diff(E.pos([2 4])));        xy = xyrotate(C.xy(:,1),C.xy(:,2),E.angle);        crit = xyrotate(E.pos([1 3]),E.pos([2 4]),E.angle);        if C.sign < 0        id = find(xy(:,1) < mean(crit(:,1)));        nid = find(xy(:,1) > mean(crit(:,1)));        else        id = find(xy(:,1) > mean(crit(:,1)));        nid = find(xy(:,1) < mean(crit(:,1)));        end        C.angle = E.angle;        C.clst(id) = 2;        oldi = find(C.clst(nid) ==2);        C.clst(nid(oldi)) = 1;        nspk = length(id);        C.crit = mean(crit(:,1));%        C.xy = xy;        Clusters{e}{p}.crit = C.crit;%        E.pos(1) = mean(crit(:,1)); %       E.pos(3) = mean(crit(:,1)); %       E.pos(4) = max(xy(:,2)); %       E.pos(2) = min(xy(:,2));        E.pos(5) = max(xy(:,1));        E.pos(7) = min(xy(:,1));        E.pos(6) = mean(E.pos([4 2]));        E.pos(8) = E.pos(6);%        C.angle = 0;        if ~strcmp(mode,'flip')            PC.PlotClusterPoints(C,[],E.cluster,'xydata',C.xy);            PC.FinishXYPlot(gca, DATA, C.exptid,C.probe(1));        fprintf('%.2f ',E.pos);        fprintf('\n');        PC.DrawEllipse(E);        C.pos = E.pos;        end        DATA.elmousept.pos = E.pos;        if C.space(1) == 6        end    end    C.id = find(C.clst ==E.cluster+1);    muid = find(C.clst == 1);    Clusters{e}{p}.clst = C.clst;    if DATA.plot.spkmean        Spks = PC.CheckAllSpikes(DATA, e,p,'allprobes');%can only recalc mean for this probe. Spks won't have matching time samples%on other probes        if length(C.clst) == size(Spks{e,p}.values,1)            for j = p                Vs = Spks{e,p}.Vscale;                Clusters{e}{p}.MeanSpike.ms(j,:) = mean(Spks{e,j}.values(C.id,:)) .*Vs;                Clusters{e}{p}.MeanSpike.mu(j,:) = mean(Spks{e,j}.values(muid,:)) .*Vs;            end            oldf = gcf;            PC.SetFigure(DATA, DATA.tag.spkmean);            h = PC.PlotMeanSpike(Clusters{e}{p},p,E.cluster,DATA.plotmeantype,DATA);            set(0,'CurrentFigure',oldf);        else            fprintf('E%dP%d Spikes(%s)/Cluster(%d) length mismatch',e,p,size(Spks{e,p}.values,1),length(C.clst));        end    end%    Clusters{e}{p}.xy = C.xy; Shouldn't have to change xy any moreif isfield(C,'crit')    Clusters{e}{p}.crit = C.crit;    Clusters{e}{p}.sign = C.sign;else    Clusters{e}{p}.crit = 0;end    setappdata(DATA.toplevel,'Clusters',Clusters);    DATA.NewCut = C;    DATA.NewCut.saved= 0;    DATA.NewCut.probe = p; %temporay fix until grid clusters get correct numbers    if isfield(C,'t')        DATA.NewCut.t = C.t;        if length(C.t) > length(C.times)%            fprintf('!!!!E%dC%d  has t > times\n',C.exptno,C.probe(1));            DATA.NewCut.t = C.t;        end    end    dur = sum([DATA.Expt.Trials.dur])./10000;    s = sprintf('%d/%d Spikes (%.1f/%.1f Hz)',nspk,length(C.clst),nspk./dur,length(C.clst)./dur);    title(s);    fprintf('%s\n',s);%need to record new cluster, and new E.pos    PC.SetFigure(DATA, DATA.tag.expt);%    PC.PlotSelectedExpts(DATA);    set(DATA.toplevel,'UserData',DATA);    if DATA.plot.quickspks        PC.SetFigure(DATA, DATA.tag.spikes);        AllSpikes = PC.CheckAllSpikes(DATA, e, p,'allprobes');        h = PC.QuickSpikes(DATA, AllSpikes{e,p},C);        PC.AddLineContextMenu(DATA, h, e, p);    end    if DATA.plot.hist        PC.SetFigure(DATA, DATA.tag.hist);        PC.PlotClusterHistogram(DATA, C, 1,'cluster',DATA.currentcutcluster);    end    