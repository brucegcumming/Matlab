    function OptionMenu(a, b, fcn)                DATA = GetDataFromFig(a);        if ishandle(a)            srchandle = a;            tag = get(a,'tag');            if ~strcmp(tag,'PostMenu')                DATA = SaveCallback(DATA,a);            end        end        onoff = {'off' 'on'};        e = DATA.currentpoint(1);        if strcmp(fcn,'allvpcsmode')            tag = get(a,'Tag');            DATA.allvpcsmode = tag;            SetMenuCheck(a,'exclusive');        elseif strcmp(fcn,'combineexpt')            PC.combine(DATA);        elseif strcmp(fcn,'compareexptauto')            PC.CompareAutoClusters(DATA, DATA.exptid(DATA.currentpoint(1)));        elseif strcmp(fcn,'compareauto')            PC.CompareAutoClusters(DATA, DATA.exptid);        elseif strcmp(fcn,'dockbuttons')            P = getappdata(DATA.toplevel,'PopupWindowData');            it = findobj(allchild(DATA.toplevel),'flat','Tag','ExptListString');            pos = get(it,'position');            bh = pos(4)./length(P);            for j = 1:length(P)                uicontrol(DATA.toplevel,'style','pushbutton','string',P{j,1},...                    'callback',get(P{j,3}.buttonid, 'callback'),...                    'units','Normalized',...                    'position', [0.5 (j-1) * bh 0.49 bh]);                            end        elseif sum(strcmp(fcn,{'uselastconfig' 'uselastlayout' 'autoSUonly' 'usesavedcodes'}))            DATA.options.(fcn) = ~DATA.options.(fcn);            set(a,'Checked', onoff{1+DATA.options.(fcn)});        elseif strcmp(fcn,'useautoclusters')            DATA.useautoclusters = ~DATA.useautoclusters;            set(a,'Checked', onoff{1+DATA.useautoclusters});            PC.ShowData(DATA,DATA.currentpoint(1),DATA.currentpoint(2),'oneprobe');        elseif strcmp(fcn,'popplot')                DATA = PC.PlotAllClusters(DATA,[]);        elseif strcmp(fcn,'tofront')            FiguresToFront(DATA.tag);        elseif strcmp(fcn,'calccellmeans')            DATA = PC.CalcCellMeans(DATA);        elseif strcmp(fcn,'checkratesequence')            PC.CheckAllRateSequences(DATA);        elseif strcmp(fcn,'fillcellsfrommark')            DATA = PC.FillCellList(DATA, 'frommark');        elseif strcmp(fcn,'postmenu')            if isfield(DATA.guistate,'lastguihandle')                x = DATA.guistate.lastguihandle;                if ishandle(x) && (~isfield(DATA.guistate,'xmenu') || double(x) ~= double(DATA.guistate.xmenu))                    if isfield(DATA.guistate,'xmenu') && ishandle(DATA.guistate.xmenu)                        delete(DATA.guistate.xmenu);                    end                    DATA.guistate.xmenu = uimenu(DATA.toplevel,'Label',get(x,'label'),'callback',get(x,'callback'));                    SetData(DATA);                    PopupWindow(DATA.toplevel, get(x,'tag'),get(x,'label'),get(x,'callback'));                end            elseif isappdata(DATA.toplevel,'PopupWindowData');                PopupWindow(DATA.toplevel, '','',[]);            end            SetData(DATA);        elseif strcmp(fcn,'loadconfig')            if ~isfield(DATA,'configfile') || isempty(DATA.configfile)                DATA.configfile =  [GetFilePath('preferences') '/PlotClusters/default.config'];            end            [afile, pathname] = uigetfile(DATA.configfile);            DATA.configfile = [pathname afile];            DATA = PC.ApplyConfig(DATA);        elseif strcmp(fcn,'optimizeall')            Clusters = getappdata(DATA.toplevel,'Clusters');            ax  = findobj(gcf,'type','axes');            oldname = get(gcf,'name');            for j = 1:length(ax)                axdata = get(ax(j),'UserData');                axes(ax(j));                set(gcf,'Name',sprintf('Optimizing E%dP%d',axdata.eid,axdata.probe));                PC.FixBoundary(DATA, Clusters, axdata.eid,axdata.probe);            end            set(gcf,'Name',oldname);        elseif strcmp(fcn,'popup')            PC.PopupWindow(DATA,[], 'popup');        elseif sum(strcmp(fcn,{'savelastconfig'}))            outname = strrep(DATA.defaultconfigfile,'.config','last.config');;            PC.SavePlotClustersConfig(DATA, outname);        elseif sum(strcmp(fcn,{'saveconfig' 'savedefaultconfig'}))            if strcmp(fcn,'savedefaultconfig') || ~isfield(DATA,'configfile')                DATA.configfile = DATA.defaultconfigfile;            end            [outname, pathname] = uiputfile(DATA.configfile);            if outname                DATA.configfile = [pathname outname];                PC.SavePlotClustersConfig(DATA, DATA.configfile);                fprintf('Setttings saved to %s\n',DATA.configfile);            end        elseif strcmp(fcn,'scaledensity')            DATA.plot.scaledensity = ~DATA.plot.scaledensity;            set(a,'checked',onoff{1+DATA.plot.scaledensity});        elseif strcmp(fcn,'loadlayout')            if ~isfield(DATA,'layoutfile') || isempty(DATA.layoutfile)                DATA.layoutfile =  [GetFilePath('preferences') '/PlotClusters/Bruce.layout.mat'];            end            [afile, pathname] = uigetfile(DATA.layoutfile);            DATA.layoutfile = [pathname afile];            PC.ApplyLayout(DATA);        elseif sum(strcmp(fcn,{'savelayout' 'savedefaultlayout' 'savelastlayout'}))            if strcmp(fcn, 'savedefaultlayout')                DATA.layoutfile = DATA.defaultlayoutfile;            elseif ~isfield(DATA,'layoutfile') || isempty(DATA.layoutfile)                DATA.layoutfile =  [GetFilePath('preferences') '/PlotClusters/Bruce.layout.mat'];            end            Figpos = GetFigPos(DATA.toplevel);            Showvals = DATA.show;            f = {'spkxy' 'spkmean'};            for j = 1:length(f)            Datavals.(f{j}) = DATA.plot.(f{j});            end            if strcmp(fcn,'savelastlayout')                [pathname, outname] = fileparts(DATA.defaultlayoutfile);                outname = strrep(outname,'.layout','last.layout.mat');                pathname = [pathname '/'];            else                [outname, pathname] = uiputfile(DATA.layoutfile);            end            if outname                DATA.layoutfile = [pathname outname];                save(DATA.layoutfile,'Figpos','Showvals','Datavals');                fprintf('Layout saved to %s\n',DATA.layoutfile);            end            PC.SetCheckExclusive(a);                elseif fcn == 1            DATA.plot.density = ~DATA.plot.density;            set(a,'Checked',onoff{DATA.plot.density+1});            D = getappdata(gcf,'allplot');            if isfield(D,'type') %called from AllXY plot                if strcmp(D.type,'AllprobeXY')                    PC.PlotExptsProbe(DATA, D.type);                end            elseif isfield(DATA,'currentpoint')                PC.ShowData(DATA,DATA.currentpoint(1),DATA.currentpoint(2));            end        elseif fcn == 2            reload = 1;            DATA = PC.PlotCellList(DATA,'showfig','reload');        elseif fcn == 3            PC.PlotExpts(DATA);        elseif fcn == 4           DATA =  PC.PlotAllProbeXY(DATA);        elseif fcn == 5            PC.PlotAllProbeMean(DATA,'lineonly');        elseif fcn == 6            PC.PlotAllProbeMean(DATA,'imageonly');        elseif fcn(1) == 7 || strcmp(fcn,'excludecl1')            DATA = PC.ExcludeTrialsForCell(DATA, DATA.currentpoint(2),1);        elseif strcmp(fcn,'excludecurrent')            DATA = PC.ExcludeTrialsForCell(DATA, DATA.currentpoint(2),DATA.currentcellcluster);        elseif strcmp(fcn,'excludecl4')            DATA = PC.ExcludeTrialsForCell(DATA, DATA.currentpoint(2),4);        elseif strcmp(fcn,'excludecl3')            DATA = PC.ExcludeTrialsForCell(DATA, DATA.currentpoint(2),3);        elseif strcmp(fcn,'excludecl2')            DATA = PC.ExcludeTrialsForCell(DATA, DATA.currentpoint(2),2);        elseif strcmp(fcn,'usealltrialscl1')            DATA = PC.ExcludeTrialsForCell(DATA, DATA.currentpoint(2),1, 'reset');        elseif strcmp(fcn,'setallprobeplot')                    elseif strcmp(fcn,'findconnect')            for j =1:length(DATA.xcorrs)                xc = DATA.xcorrs(j).xc;                [a,b] = max(xc);                p = prctile(xc,[50 90]);                t = DATA.xcorrval.times(b);                if  a > p(2) * 1.1 && a > p(1) +std(xc)*4 && abs(t) < 0.01 && abs(DATA.xcorrs(j).separation) > 2                    cscore(j) = 1;                else                    cscore(j) = 0;                end                delays(j) = t;            end            np = ceil(sqrt(sum(cscore > 0)));            id = find(cscore > 0);            for j = 1:length(id)                mysubplot(np,np,j)                plot(DATA.xcorrval.times,DATA.xcorrs(id(j)).xc,'k-');                set(gca,'xtick',[],'ytick',[]);                axis('tight');                set(gca,'buttondownfcn',{@PC.HitXcorr,'zoom',0,0})                yl = get(gca,'ylim');                xl = get(gca,'xlim');                line([0 0],yl,'color','r');                text(xl(2),yl(2),sprintf('E%dP%d,%d %.1fms',DATA.xcorrs(id(j)).eid,DATA.xcorrs(id(j)).probes(1),DATA.xcorrs(id(j)).probes(2),delays(id(j)).*1000),...                    'verticalalignment','top','horizontalalignment','right');            end        elseif strcmp(fcn,'oldxcorrcells')            recalc = 0;            C= getappdata(DATA.toplevel,'Clusters');            Clusters = C{DATA.currentpoint(1)};            e = DATA.currentpoint(1);            cid = [];            cnum = [];            for j = 1:size(DATA.CellList,3)                ids{j} = find(DATA.CellList(e,:,j) > 0);                idn = ones(size(ids{j})) .*j;                cid = [cid ids{j}];                cnum = [cnum idn+1];            end            PC.SetFigure(DATA,DATA.tag.xcorr,'front');            np = length(cid);            if isfield(DATA,'xcorrs')                probes = [DATA.xcorrs.probes];                cellid = [DATA.xcorrs.cells];            else                probes = [];                cellid = [];            end            tic;            DATA.xcorrval.times = [-0.2:0.001:0.2];            for j = 1:np                for k = 1:j                    P = Clusters{cid(j)};                    Q = Clusters{cid(k)};                    if isempty(cellid)                        id = [];                    else                    id = find(cellid(:,1) == cid(j) && cellid(:,2) == cid(k) || cellid(:,2) == cid(j) && cellid(:,1) == cid(k));                    end                    if length(id) == 1 && DATA.xcorrs(id).calctime > P.savetime(1)                        xc = DATA.xcorrs(id).xc;                    else                        pid = find(P.clst == cnum(j));                        qid = find(Q.clst == cnum(j));                        xc = xcorrtimes(P.times(pid),Q.times(qid));                        DATA.xcorrs(id).xc = xc;                    end                    if k == j                        xc(201) = 0;                    end                    mysubplot(np,np,k+(j-1)*np,'leftmargin',0.02);                    plot(-200:200,xc,'k');                    axis('tight');                    if k == j                        title(sprintf('P%d',cid(k)));                    end                    if k == 1                        ylabel(sprintf('P%d',cid(j)));                    end                    set(gca,'xtick',[],'ytick',[]);                end            end            PC.PlotXcorrs(DATA, DATA.xcorrs, DATA.currentpoint(1), bycell);            toc        elseif sum(strcmp(fcn,{'allexptduplicates'}))            C= getappdata(DATA.toplevel,'Clusters');            for e = 1:length(C)                cells = [];                Clusters = C{e};                [a,b] = find(squeeze(DATA.CellList(e,:,:)) > 0);                for j = 1:length(a)                    cells(j).p = a(j);                    cells(j).cl = b(j);                    cells(j).eid = e;                    [cells(j).dp,  cells(j).dropi] = PC.DistanceMeasure(Clusters{a(j)},b(j),DATA.mahaltype,'zeropad');                end                DATA.options.efficonly = 1;                DATA.plot.xcorrpoptype = 'duplicates';                PlotAllXcorr(DATA, Clusters,cells,'callback',@PC.PlotXcorr,'efficonly');                G{e} = PC.ReplotXcorrs(DATA,[],DATA.plot.xcorrpoptype);            end            setappdata(DATA.toplevel,'AllDuplicates',G);            PC.PlotDuplicates(DATA);        elseif sum(strcmp(fcn,{'exptcellduplicates'}))            C= getappdata(DATA.toplevel,'Clusters');            Clusters = C{e};            [a,b] = find(squeeze(DATA.CellList(e,:,:)) > 0);            cell = [];            for j = 1:length(a)                cells(j).p = a(j);                cells(j).cl = b(j);                [cells(j).dp,  cells(j).dropi] = PC.DistanceMeasure(Clusters{a(j)},b(j),DATA.mahaltype,'zeropad');            end            DATA.options.efficonly = 1;            DATA.plot.xcorrpoptype = 'duplicates';            PlotAllXcorr(DATA, Clusters,cells,'callback',@PC.PlotXcorr,'efficonly');            PC.ReplotXcorrs(DATA,[],DATA.plot.xcorrpoptype);        elseif sum(strcmp(fcn,{'allclusterxcorr' 'exptduplicates' 'exptcellduplicates'}))            C= getappdata(DATA.toplevel,'Clusters');            Clusters = C{DATA.currentpoint(1)};            if strcmp(fcn,'exptduplicates')                                DATA.options.efficonly = 1;                DATA.plot.xcorrpoptype = 'duplicates';            end            cells = PC.ClusterList(DATA, Clusters);            PC.SetFigure(DATA,DATA.tag.xcorr);            args = {};            if DATA.options.efficonly                args = {args{:} 'efficonly'};            end            PlotAllXcorr(DATA, Clusters,cells,'callback',@PC.PlotXcorr,args{:});            PC.ReplotXcorrs(DATA,[],DATA.plot.xcorrpoptype);        elseif sum(strcmp(fcn,{'paireffic' 'pairsep' 'efficsep' 'calctime'}))            PC.ReplotXcorrs(DATA,[],fcn);        elseif strcmp(fcn,'efficonly')            DATA.options.efficonly = ~DATA.options.efficonly;            if DATA.options.efficonly                set(a,'checked','on');            else                set(a,'checked','off');            end        elseif strcmp(fcn,'noxcplot')            DATA.plot.showxc = ~DATA.plot.showxc;            if DATA.plot.showxc                set(a,'checked','off');            else                set(a,'checked','on');            end                Cl        elseif find(strcmp(fcn,{'xcorrcells' 'xcorrallcells' 'xcorrallprobes' ...                'recalcxcorrcell' 'recalcxcorrall' 'paireffic'}))            if  strcmp(fcn, 'recalcxcorrcell')                recalc = 1;                DATA = rmfields(DATA,'xcorrs');                bycell = 1;            elseif  strcmp(fcn, 'recalcxcorrall')                recalc = 1;                DATA = rmfield(DATA,'xcorrs');                bycell = 0;            else                recalc = 0;            end            if  strcmp(fcn, 'xcorrallprobes')                bycell = 0            else                bycell = 1;            end            C= getappdata(DATA.toplevel,'Clusters');            Clusters = C{DATA.currentpoint(1)};            if strcmp(fcn,'xcorrcells')                expts = DATA.currentpoint(1);            else                expts = 1:length(DATA.exptid);            end            e = 1;            cid = [];            cnum = [];            for j = 1:size(DATA.CellList,3)                ids{j} = find(DATA.CellList(e,:,j) > 0);                idn = ones(size(ids{j})) .*j;                cid = [cid ids{j}];                cnum = [cnum idn+1];            end            PC.SetFigure(DATA,DATA.tag.xcorr,'front');            ClearPlot;            nc = 0;            if isfield(DATA,'xcorrs') && recalc == 0                probes = cat(1,DATA.xcorrs.probes);                cellid = cat(1,DATA.xcorrs.cells);                [DATA.xcorrs.valid] = deal(0);                for j = 1:length(DATA.xcorrs)                    e = DATA.xcorrs(j).eid;                    p = DATA.xcorrs(j).probes;                    c = DATA.xcorrs(j).cells;                    cl = DATA.xcorrs(j).clnum;                    cc(1) = DATA.CellList(e,p(1),cl(1));                    if DATA.CellList(e,p(1),cl(1)) ~= c(1)                        fprintf('E%dP%d Setting old xcorr C%d to C%d\n',e,p(1),c(1),DATA.CellList(e,p(1),cl(1)));                        DATA.xcorrs(j).cells(1) = DATA.CellList(e,p(1),cl(1));                        nc = nc+1;                    end                    if DATA.CellList(e,p(2),cl(2)) ~= c(2)                        fprintf('E%dP%d Setting old xcorr  C%d to C%d\n',e,p(2),c(2),DATA.CellList(e,p(2),cl(2)));                        DATA.xcorrs(j).cells(2) = DATA.CellList(e,p(2),cl(2));                        nc = nc+1;                    end                end            else                probes = [0 0];                cellid = [0 0];            end            np = length(cid);            tic;            nxc = 1;            DATA.xcorrval.times = [-0.2:0.001:0.2];            for eid = 1:length(expts)                e = expts(eid);                cid = [];                cnum = [];                Clusters = C{e};                cells = [];                for j = 1:size(DATA.CellList,3)                    ids{j} = find(DATA.CellList(e,:,j) > 0);                    idn = ones(size(ids{j})) .*j;                    cid = [cid ids{j}];                    cnum = [cnum idn+1];                    cells = [cells DATA.CellList(e,ids{j},j)];                end                [cells, id] = sort(cells);%                id = id(ismember(cells,[4 14]));                cid = cid(id);                cnum = cnum(id);                if bycell                    np = length(cid);                else                    np = DATA.nprobes;                    cnum = ones(1,np).*2;                end                                                fprintf('E%d %d Cells:%s\n',e,np,sprintf(' %d',cells));                for j = 1:np                    for k = 1:j                        if bycell                            P = Clusters{cid(j)};                            Q = Clusters{cid(k)};                            id = find(cellid(:,1) ==cells(j) & cellid(:,2) == cells(k) | cellid(:,2) == cells(j) & cellid(:,1) == cells(k));                        else                            P = Clusters{j};                            Q = Clusters{k};                            id = find(probes(:,1) == j & probes(:,2) == k);                        end                        if ~isfield(DATA,'xcorrs')                            id = [];                            DATA.xcorrs = [];                        else                            id = intersect(id,find([DATA.xcorrs.eid] == e));                        end                        if length(id) == 1                            p = DATA.xcorrs(id).probes;                            c = DATA.xcorrs(id).cells;                            cl = DATA.xcorrs(id).clnum;                            cc(1) = DATA.CellList(e, p(1), cl(1));                            cc(2) = DATA.CellList(e, p(2), cl(2));                            if sum(cc == c) == 2                                ok = 1;                            else                                ok = 0;                            end                        else                            ok = 0;                        end                        if recalc == 0 && ok && DATA.xcorrs(id).calctime > max([P.savetime(1) Q.savetime(1)])                            xc = DATA.xcorrs(id).xc;                            DATA.xcorrs(id).valid = 1;                        else                            if length(id) >= 1                                nxc = id(1);                            else                                nxc = length(DATA.xcorrs)+1;                            end                            if recalc == 1                                fprintf('Recalculating %d->%d',cells(j),cells(k));                            end                            if cells(k) > cells(j)                                fprintf('Order error\n');                            end                            if DATA.CellList(e,cid(j),cnum(j)-1) ~= cells(j)                                fprintf('Cell %d ->cell %d in list\n',DATA.CellList(e,cid(j),cnum(j)-1),cells(j));                            end                            if DATA.CellList(e,cid(k),cnum(k)-1) ~= cells(k)                                fprintf('Cell %d ->cell %d in list\n',DATA.CellList(e,cid(k),cnum(k)-1),cells(k));                            end                            pid = find(P.clst == cnum(j));                            qid = find(Q.clst == cnum(k));                            if isfield(P,'t')                                [xc, details] = xcorrtimes(P.t(pid),Q.t(qid));                            else                                [xc, details] = xcorrtimes(P.times(pid),Q.times(qid));                            end                            if k == j                                xc(details.xpts == 0) = 0;                            end                            DATA.xcorrval.times = details.xpts;                            DATA.xcorrs(nxc).xc = xc;                            DATA.xcorrs(nxc).n = [length(pid) length(qid)];                            DATA.xcorrs(nxc).valid = 1;                            if bycell                                DATA.xcorrs(nxc).cells = [DATA.CellList(e,cid(j),cnum(j)-1) DATA.CellList(e,cid(k),cnum(k)-1)];                                DATA.xcorrs(nxc).separation = ArrayDistance(DATA.ArrayConfig, cid(j),cid(k));                                DATA.xcorrs(nxc).probes = [cid(j) cid(k)];                                DATA.xcorrs(nxc).clnum = [cnum(j)-1 cnum(k)-1];                                if diff(DATA.xcorrs(nxc).cells) > 0                                    fprintf('Order error\n');                                end                            else                                DATA.xcorrs(nxc).cells = [DATA.CellList(e,j,1) DATA.CellList(e,k,1)];                                DATA.xcorrs(nxc).separation = j-k;                                DATA.xcorrs(nxc).probes = [j k];                                DATA.xcorrs(nxc).clnum = [1 1];                            end                            DATA.xcorrs(nxc).eid = e;                            DATA.xcorrs(nxc).shapexc = PC.ShapeCorr(P,Q);                            DATA.xcorrs(nxc).calctime = now;                            DATA.xcorrs(nxc).effic = details.efficacy;                        end                    end                end            end            toc            PC.SaveExtras(DATA);            C= getappdata(DATA.toplevel,'Clusters');            set(DATA.toplevel,'UserData',DATA);            setappdata(DATA.toplevel,'xcorrs',DATA.xcorrs);            PC.PlotXcorrs(DATA, DATA.xcorrs, expts, bycell);        elseif strcmp(fcn,'usealltrialscl2')            DATA = PC.ExcludeTrialsForCell(DATA, DATA.currentpoint(2),2, 'reset');        elseif fcn == 8            DATA.plot.gmcid = ~DATA.plot.gmcid;            set(a,'Checked',onoff{DATA.plot.gmcid+1});        elseif fcn == 9 %'xcorrselected            C= getappdata(DATA.toplevel,'Clusters');            Clusters = C{DATA.currentpoint(1)};            e = DATA.currentpoint(1);            PC.SetFigure(DATA,DATA.tag.xcorr,'front');            ps = find(DATA.selectprobe(e,:));            np = length(ps);            if np == 1                np = length(Clusters{ps}.next)+1;                oneprobe = 1;            else                oneprobe = 0;            end            for j = 1:np                for k = 1:j                    if oneprobe                        P = Clusters{ps};                        probe = ps;                        probeb = k;                        pid = find(P.clst == 1+j);                        qid = find(P.clst == 1+k);                        xc = xcorrtimes(P.t(pid),P.t(qid));                    else                        P = Clusters{ps(j)};                        probe = ps(j);                        probeb = ps(k);                        pid = find(P.clst == 2);                        Q = Clusters{ps(k)};                        qid = find(Q.clst == 2);                        xc = xcorrtimes(P.t(pid),Q.t(qid));                    end                    if k == j                        xc(201) = 0;                    end                    mysubplot(np,np,k+(j-1)*np);                    plot(-200:200,xc);                    axis('tight');                    if k == j                        title(sprintf('P%d',probeb));                    end                    if k == 1                        ylabel(sprintf('P%d',probe));                    end                end            end        elseif fcn == 10 %Xcorr for all adjacent probes            C= getappdata(DATA.toplevel,'Clusters');            Clusters = C{DATA.currentpoint(1)};            PC.SetFigure(DATA,DATA.tag.allxy,'front');            [nr,nc] = Nsubplots(length(Clusters));            PC.SetFigure(DATA,DATA.tag.allxy);            tic;            for j = 1:length(Clusters)-1                mysubplot(nr,nc,j);                xr = get(gca,'xlim');                yl = get(gca,'ylim');                hold off;                P = Clusters{j};                Q = Clusters{j+1};                pid = find(P.clst == 2);                qid = find(Q.clst == 2);                xc = xcorrtimes(P.t(pid),Q.t(qid),'method',5);                xpts = linspace(xr(1),xr(2),length(xc));                plot(xpts,yl(1)+(xc.*diff(yl)./max(xc)),'k','linewidth',2);                drawnow;            end            toc;        elseif fcn == 11            DATA =  PC.PlotAllProbeXY(DATA,'oneprobe');        elseif fcn == 12            PC.Get2DMaxima(DATA);        elseif fcn == 13            DATA = PC.FindMissing(DATA);%            PC.CellFinder(DATA,1);        elseif strmatch(fcn,{'showexcluded' 'showcellmeans'})            DATA.plotspk.(fcn) = ~DATA.plotspk.(fcn);            set(a,'Checked', onoff{1+DATA.plotspk.(fcn)});        end        set(DATA.toplevel,'UserData',DATA);       