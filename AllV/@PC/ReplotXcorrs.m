function out = ReplotXcorrs(a,b, type)           DATA = GetDataFromFig(a);    if sum(strcmpi(type, {'duplicates' 'showduplicates'}))        out = PlotExptDuplicates(DATA, type);        return;    end    xcorrs = getappdata(DATA.toplevel,'xcorrs');    F = 0;    if sum(strcmpi(type, {'meanim' 'xcorr' 'syncspikes' 'histograms' 'alleg'}))        DATA.plot.xcorrtype = type;        SetMenuCheck(a,'exclusive');        set(DATA.toplevel,'UserData',DATA);            elseif strcmp(type,'calctime') %time really just related to # events        hold off;         plot(sum(cat(1,xcorrs.xc),2),diff([0 xcorrs.ts]),'o')           elseif strcmpi(type, 'nspkEfficacy')        DATA.plot.xcorrpoptype = type;        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        ClearPlot;        hold off;        for j = 1:length(xcorrs)            plot(xcorrs(j).nspk(1), xcorrs(j).efficacy(1),'o',...                'buttondownfcn',{@PC.PlotXcorr, xcorrs(j).p(1),xcorrs(j).p(2)});            hold on;        end        set(gca,'yscale','log','ylim',[min([xcorrs.shapexc]) 1],'xscale','log');        ylabel('Efficacy');        xlabel('NSpks');    elseif sum(strcmpi(type, { 'duplicates'}))        PlotExptDuplicates(DATA);    elseif sum(strcmpi(type, {'Efficacy Matrix' 'Efficacy' 'duplicates'}))        ndup = 0;        for j = 1:length(xcorrs)            probes(j,1) = xcorrs(1).p(1);            probes(j,2) = xcorrs(1).p(2);        end        if strcmpi(type,'duplicates')            plottype = 1;        else            plottype = 0;        end        nd = 0;        for j = 1:length(xcorrs)            X = xcorrs(j);            a = max(X.efficacy([1 2]));            b = max(X.efficacy([3 4]));            if isnan(a)                a = 0;            end            if plottype ==1                xIm(X.p(1),X.p(2)) = X.efficacy(1);                xIm(X.p(2),X.p(1)) = X.efficacy(2);                if X.p(1) == X.p(2)                    Im(X.p(1),X.p(2)) = NaN;                    xIm(X.p(1),X.p(2)) = 1;                elseif a > 0.1 && a > b * 1.5                    nd = nd+1;                    duplicates(nd,:) = X.p;                    probepairs(nd,:) = X.probe;                    dupid(nd) = j;                    effic(nd) = a;                else                    Im(X.p(1),X.p(2)) = 0;                end            else                Im(X.p(1),X.p(2)) = X.efficacy(1);                Im(X.p(2),X.p(1)) = X.efficacy(2);            end                labels{X.p(1)} = sprintf('%.1f',X.probe(1));        end                F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        hold off;        if plottype == 1            I = imagesc(Im, 'buttondownfcn',{@ImageHit,'duplicates'});            for j = 1:ndup                square(1,1:5) = ubest(j) + [-0.5 -0.5 0.5 0.5 -0.5];                square(2,1:5) = ubest(j) + [-0.5 0.5 0.5 -0.5 -0.5];                line(square(1,:),square(2,:),'color','w', 'linewidth',2);            end        else            I = imagesc(Im, 'buttondownfcn',{@ImageHit,'paireffic'});        end        set(gca,'ytick',1:length(labels),'yticklabel',labels);        set(gca,'xtick',1:length(labels),'xticklabel',labels);    elseif strcmpi(type, 'Shape/Efficacy')        DATA.plot.xcorrpoptype = type;        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        ClearPlot;        hold off;        for j = 1:length(xcorrs)            plot(xcorrs(j).shapexc, max(xcorrs(j).efficacy),'o',...                'buttondownfcn',{@PC.PlotXcorr, xcorrs(j).p(1),xcorrs(j).p(2)});            hold on;        end        set(gca,'yscale','log','ylim',[min([xcorrs.shapexc]) 1]);        ylabel('Efficacy');        xlabel('Shape Xcorr');    elseif strcmpi(type, 'cmpefficacy')        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        hold off;        for j = 1:length(xcorrs)            c(j) = max(xcorrs(j).efficacy([1 2]));            r(j) = max(xcorrs(j).efficacy([3 4]));        end                plot(c,r,'o', 'buttondownfcn',{@ScatterHit,'cmpeffic'});        set(gca,'xlim',[0 1]);        yl = get(gca,'ylim');        line([0 yl(2)],[0 yl(2)]);        xlabel('Efficacy dt < 0.1ms');        ylabel('Efficacy: 0.1ms < dt < 1ms')    elseif strcmpi(type, 'efficsep')        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        for j = 1:length(xcorrs)            c(j) = max(xcorrs(j).efficacy);            r(j) = xcorrs(j).separation;        end                plot(c,r,'o', 'buttondownfcn',{@ScatterHit,'efficsep'});    elseif strcmpi(type, 'pairsep')        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        for j = 1:length(xcorrs)            c = xcorrs(j).p(1);            r = xcorrs(j).p(2);            if c ~= r                Im(c,r) = xcorrs(j).separation;                Im(r,c) = xcorrs(j).separation;            end                    end                hold off;         imagesc(Im, 'buttondownfcn',{@ImageHit,'paireffic'});        colorbar;    elseif strcmpi(type, 'paireffic')        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        for j = 1:length(xcorrs)            c = xcorrs(j).cells(1);            r = xcorrs(j).cells(2);            if c ~= r                Im(c,r) = xcorrs(j).effic(1);                Im(r,c) = xcorrs(j).effic(2);            end                    end                imagesc(Im, 'buttondownfcn',{@ImageHit,'paireffic'});        colorbar;    end    if(F)        PC.AddPlotMenu(F,'xcorrplot');    end function AddDuplicateMenu(a)      it = findobj(a,'type','uimenu','tag','DuplicateMenu');     if isempty(it)         hm = uimenu(a,'label','Duplicates','tag','DuplicateMenu');         sm = uimenu(hm,'label', 'Mark All Duplicates, interactive','callback',{@SetDuplicateMenu, 'setinteractive'});         sm = uimenu(hm,'label', 'Mark All Duplicates, Nointeractive','callback',{@SetDuplicateMenu, 'noninteractive'});         sm = uimenu(hm,'label', 'Mark All Duplicates All Expt, Nointeractive','callback',{@SetDuplicateMenu, 'allexpts'});     end    function CellGroups = PlotExptDuplicates(DATA, type, varargin)        figtag = DATA.tag.xcorrpop;    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'figtag',6)            j = j+1;            figtag = varargin{j};        end        j = j+1;    end        xcorrs = getappdata(DATA.toplevel,'xcorrs');    cells = getappdata(DATA.toplevel,'xcCellList');    probes = [cells.p] + [cells.cl]/10;    for j = 1:length(cells)        [~, cells(j).cell] = PC.isacell(DATA, cells(j));    end    eid = DATA.currentpoint(1);    ndup = 0;    CellGroups.cells = cells;    CellGroups.cellid = [cells.cell];    CellGroups.probes = [cells.p] + ([cells.cl]-1)/10;    CellGroups.xcorrs = xcorrs;    if strcmp(type,'showduplicates') %show existing dups in Celllist        p = cat(1,xcorrs.probe);        [~,cellid] = PC.isacell(DATA, eid, p);        dpairs = find(sum((cellid ~= 0)')==2);        xcorrs = xcorrs(dpairs);    end    for j = 1:length(xcorrs)            probes(j,1) = xcorrs(1).p(1);            probes(j,2) = xcorrs(1).p(2);    end    plottype = 1;        nd = 0;        for j = 1:length(xcorrs)            X = xcorrs(j);            a = max(X.efficacy([1 2]));            b = max(X.efficacy([3 4]));            if isnan(a)                a = 0;            end                xIm(X.p(1),X.p(2)) = X.efficacy(1);                xIm(X.p(2),X.p(1)) = X.efficacy(2);                if X.p(1) == X.p(2)                    Im(X.p(1),X.p(2)) = NaN;                    xIm(X.p(1),X.p(2)) = 1;                elseif a > 0.1 && a > b * 1.5                    nd = nd+1;                    duplicates(nd,:) = X.p;                    probepairs(nd,:) = X.probe;                    dupid(nd) = j;                    effic(nd) = a;                else                    Im(X.p(1),X.p(2)) = 0;                end                labels{X.p(1)} = sprintf('%.1f',X.probe(1));        end        if strcmp(type,'duplicates') && nd ==0            groups = {};            return;        elseif strcmp(type,'duplicates')            groups = {};            cells = getappdata(DATA.toplevel,'xcCellList');            probes = [cells.p] + [cells.cl]/10;            for j = 1:length(cells)                [~, cells(j).cell] = PC.isacell(DATA, cells(j));            end            dc = unique(duplicates);            F = GetFigure(DATA.tag.xcorr,DATA.toplevel);            for j = 1:length(dc)                [a,b] = find(duplicates == dc(j));                p = unique(duplicates(a,:)); %all pairs involving dc(j)                ps{j} = p(:);                d = -[cells(p).dp];                d(d < 0) = 0;                [dp, dpi] = sort(d);                [drops, dropi] = sort([cells(p).dropi]);                [a,b] = sort(d .* [cells(p).dropi]);                best(j) = p(b(end));                [a,b] = find(duplicates == best(j));                p = unique(duplicates(a,:)); %all pairs involving dc(j)                bestps{j} = p; %all cells that are duplicates of the best                dupprobes{j} = p(:);                if max(Counts([cells(p(:)).p])) > 1                    dupprobe = 1;                end            end            ubest = unique(best);            ndup = length(ubest);            [ups, uid] = uniquegroups(ps);             fprintf('%d Best clusters, %d groups\n',ndup,length(ups));            grouponce = 0;            if grouponce                xIm = xIm(dc,dc);               [X, score, pid] = squishDistanceMatrix(xIm,'min','laps',1);               [igroups, details] = GroupByOverlap(X);               hold off;               imagesc(X);               hold on;               for j = 1:length(igroups)                   PC.DrawBox([min(igroups{j}) max(igroups{j})],[min(igroups{j}) max(igroups{j})],'duplicates');               end            end                        D.probes = dupprobes;            D.best = best;            setappdata(DATA.toplevel,'duplicates',D);            cinc = 1./(length(ndup)-1);            colors = randperm(ndup)./ndup;            colors = mod(ceil([1:ndup] * 3),ndup)./ndup;            ts = now;            for j = 1:length(uid)                di = best(uid(j));                [a,b] = find(duplicates == best(uid(j)));                nc = sum(ismember(ups{j},ubest));                if nc > 1                    fprintf('Making Groups for %d(%d):%s\n',dc(uid(j)),j,sprintf(' %d',ups{j}));                    newgroups = GroupDuplicates(DATA,ups{j});                    groups = {groups{:} newgroups{:}};                else                    fprintf('Single Group for%s(%s)\n',sprintf(' %d',ups{j}),sprintf(' %.1f',probes(ups{j})));                    groups = {groups{:} ups{j}};                end                Im(di,duplicates(a,:)) = colors(find(ubest == di));                Im(duplicates(a,:), di) = colors(find(ubest == di));            end            x = uniquegroups(groups);            x = SubsumeGroups(x);            [nid, allid] = Counts(cat(1,x{:}));            nid = allid(nid>1); %cells in two groups.             CellGroups.promiscuous = nid;            for j = 1:length(nid)                id = find(cellmember(nid(j),x));                for k = 1:length(id)                    if length(x{id(k)}) > 2                        x{id(k)} = setdiff(x{id(k)},nid(j));                    end                end            end            [nid, allid] = Counts(cat(1,x{:}));            nogroup = setdiff(1:size(xIm,1),allid);            d = [];            for j = 1:length(nogroup)                for k = 1:length(x)                    d(k) = mean(xIm(nogroup(j),x{k}));                end                [~,k] = max(d);                if k >= length(x)                    x{end+1} = nogroup(j);                else                    x{end+1} = x{k};                    x{k} = nogroup(j);                end            end            igroups = x;            for j = 2:length(x)                for k = 1:j;                    gIm(j,k) = nanmean(nanmean(xIm(x{j},x{k})))+nanmean(nanmean(xIm(x{k},x{j})));                    oIm(j,k) = length(intersect(x{j},x{k}));                    oIm(k,j) = oIm(j,k);                    gIm(k,j) = gIm(j,k);                end            end            [O, score, pid] = squishDistanceMatrix(gIm,'min','laps',1,'waitbar');            newpid = x{pid(1)}; %first group            for j = 2:length(pid)                [~, ia] = setdiff(x{pid(j)},newpid);                newpid = cat(1,newpid, x{pid(j)}(sort(ia)));            end            O = RemapSquareMatrix(xIm, newpid);            O = SetDiag(O,0);            for j = 1:length(igroups)                if length(igroups{j}) > 1                    gbest(j) = BestCell(cells, igroups{j});                    k = find(newpid == gbest(j));                    O(k,k) = 1;                    bestk(j) = k;                end            end        else            [a,b] = Counts(abs([cells.cell]));            cid = find(a >1 & b > 0 & b < 100);            igroups = {};            for j = 1:length(cid)                id = find(abs([cells.cell]) == b(cid(j)));                igroups{j} = id';            end            for j = 2:length(igroups)                for k = 1:j;                    gIm(j,k) = nanmean(nanmean(xIm(igroups{j},igroups{k})))+nanmean(nanmean(xIm(igroups{k},igroups{j})));                    oIm(j,k) = length(intersect(igroups{j},igroups{k}));                    oIm(k,j) = oIm(j,k);                    gIm(k,j) = gIm(j,k);                end            end            [O, score, pid] = squishDistanceMatrix(gIm,'min','laps',1,'waitbar');            newpid = igroups{pid(1)}; %first group            for j = 2:length(pid)                [~, ia] = setdiff(igroups{pid(j)},newpid);                newpid = cat(1,newpid, igroups{pid(j)}(sort(ia)));            end            O = RemapSquareMatrix(xIm, newpid);            O = SetDiag(O,0);        end            F = GetFigure(figtag,DATA.toplevel);            hold off;            I = imagesc(O,'buttondownfcn',{@ImageHit,'duplicates'});            hold on;            for j = 1:length(igroups)                ig = find(ismember(newpid,igroups{j}));                if length(ig) > 1                    l = min(ig);                    r = max(ig);                    if sum(CellGroups.cellid(igroups{j}))                        linecolor = 'y';                    else                        linecolor = 'w';                    end                                            PC.DrawBox([l r],[l r],{@ImageHit, 'duplicates'},'color',linecolor);                end            end            for j = 1:length(newpid)                if cells(newpid(j)).cell > 0                    PC.DrawBox(j,j,{@ImageHit, 'duplicates'},'color','w');                    if j > length(newpid)/2                        text(j-4,j,sprintf('cell%d',cells(newpid(j)).cell),'color','w','HorizontalAlignment','right');                    else                        text(j+4,j,sprintf('cell%d',cells(newpid(j)).cell),'color','w','HorizontalAlignment','left');                    end                end            end            xlabels = labels(newpid);            set(gca,'ytick',1:length(labels),'yticklabel',xlabels);            set(gca,'xtick',1:length(labels),'xticklabel',xlabels);            CellGroups.order = newpid;            CellGroups.groups = igroups;            setappdata(F,'CellGroups',CellGroups);            for j = 1:ndup                Im(ubest(j),ubest(j)) = colors(j);            end%Build image showing groups with overlap                        for j = 2:length(igroups)                for k = 1:j-1                    overlap(j,k) = sum(ismember(igroups{j},igroups{k}));                end            end            cmenu = uicontextmenu;            uimenu(cmenu,'label','Show Sync Spikes These probes','Callback',{@SetDuplicateGUI 'showspikes'});            uimenu(cmenu,'label','Show Spikes for group','Callback',{@SetDuplicateGUI 'showgroupspikes'});            uimenu(cmenu,'label','Mark this in CellList','Callback',{@SetDuplicateGUI, 'mark'});            set(gca,'UIContextMenu',cmenu);            set(I,'UIContextMenu',cmenu);            fprintf('PlotDuplicates took %.2f for %d clusters in %d groups\n',mytoc(ts),length(newpid),length(ups));            AddDuplicateMenu(F);            title(sprintf('Duplicats for Expt %d',DATA.currentpoint(1)));          function ScatterHit(a,b, type)p = get(gca,'currentpoint');pos = p(1,1) + i * p(1,2);DATA = GetDataFromFig(a);c = findobj(gca,'type','line','linestyle','none');x = get(c,'Xdata');y = get(c,'Ydata');d = abs(pos - (x + y.*i));[a,b] = min(d);PC.PlotXcorr(DATA,DATA.plot.xcorrtype,'xcorr', b);    function ImageHit(a,b, type)                DATA = GetDataFromFig(a);        F = GetFigure(a);       pos = round(get(gca,'currentpoint'));       cid(1) = pos(1,1);       cid(2) = pos(1,2);               xcorrs = getappdata(DATA.toplevel,'xcorrs');       if isappdata(F,'CellGroups')           CellGroups = getappdata(F,'CellGroups');           cid = CellGroups.order(cid);           if isfield(CellGroups,'xcorrs')               xcorrs = CellGroups.xcorrs;           end       end       pid = cat(1,xcorrs.p);       aid = find(pid(:,1) == cid(1) & pid(:,2) == cid(2));       bid = find(pid(:,2) == cid(1) & pid(:,1) == cid(2));       id = unique([aid bid]);       if strcmp(type,'duplicates');        smode = get(gcf,'SelectionType');        if strcmp(smode,'alt') %R button - just show menu            cells = getappdata(DATA.toplevel,'xcCellList');            G = getappdata(F,'CellGroups');            cmenu = uicontextmenu;            if diff(cid) ==0                [~,cellid] = PC.isacell(DATA, cells(cid(1)));                if cellid == 0 %this square not a cell, use best in group                    gid = find(cellmember(cid,G.groups));                    cellid = G.cells(G.groups{gid(1)});                    cellid = cellid(cellid > 0);                    if length(cellid) > 1                        cellid = BestCell(cells,cellid);                    end                end                lb = sprintf('Mark %d/%d as cell %d, rest as duplicate',cells(cid(1)).p,cells(cid(1)).cl,cellid)                uimenu(cmenu,'label',lb, 'Callback',{@SetDuplicateGUI 'setduplicates' cellid cid(1)});            end            uimenu(cmenu,'label','Show Sync Spikes These probes','Callback',{@SetDuplicateGUI 'showspikes'});            uimenu(cmenu,'label','Show xcorr These probes','Callback',{@SetDuplicateGUI 'showxcrr'});            uimenu(cmenu,'label','Show Spikes for group','Callback',{@SetDuplicateGUI 'showgroupspikes'});            set(gca,'UIContextMenu',cmenu);            set(a,'UIContextMenu',cmenu);            return;        end           PlotDuplicates(DATA, id, CellGroups);       else           PC.PlotXcorr(a,b,pos(1,1),pos(1,2));       end                function PlotDuplicates(DATA, xid, CellGroups)       xcorrs = getappdata(DATA.toplevel,'xcorrs');       cells = getappdata(DATA.toplevel,'xcCellList');       D = getappdata(DATA.toplevel,'duplicates');       if isfield(CellGroups,'xcorrs')           xcorrs = CellGroups.xcorrs;       end       if isfield(CellGroups,'cells')           cells = CellGroups.cells;       end       duplicates = D.probes;       probes = [cells.p] + [cells.cl]/10;       p = xcorrs(xid).p;       xprobes = cat(1,xcorrs.p);       gid = find(cellmember(xcorrs(xid).p,CellGroups.groups) ==2);       if isfield(xcorrs(xid),'efficacy')           str = sprintf(' %.3f',xcorrs(xid).efficacy);       else           str = '';       end      fprintf('P%.1f->%.1f%s\n',xcorrs(xid).probe,str);%Find all duplicate sets that either probe belongs too      nd = 0;      dupset = {};      for j = 1:length(duplicates)          if sum(ismember(p,duplicates{j}))              if nd == 0                  nd = 1;                  dupset{nd} = duplicates{j};                  fprintf('%s Best %.1f\n',sprintf('%.1f ',probes(duplicates{j})),probes(D.best(j)));              end              if ~isempty(setdiff(duplicates{j},cat(1,dupset{:})))                  nd = nd+1;                  dupset{nd} = duplicates{j};                  fprintf('%s Best %.1f\n',sprintf('%.1f ',probes(duplicates{j})),probes(D.best(j)));              end          end      end udup = unique(cat(1,dupset{:})); pairs = udup; NewGroups.cells = CellGroups.cells(pairs); F = PC.SetFigure(DATA, DATA.tag.xcorr); if isempty(dupset) || isempty(gid) %no duplicates for this square     PC.PlotXcorr(DATA,DATA.plot.xcorrtype,'xcorr', xid);     return; end hold off;  plottype = 2; for j = 1:length(pairs)     labels{j} = sprintf('%d.%d',cells(pairs(j)).p,cells(pairs(j)).cl);     for k = 1:(j-1)         id = find(xprobes(:,1) == pairs(j) & xprobes(:,2) == pairs(k));         eIm(j,k) = xcorrs(id).efficacy(1);         eIm(k,j) = xcorrs(id).efficacy(2);         sIm(j,k) = xcorrs(id).shapexc;         sIm(k,j) = xcorrs(id).shapexc;         if plottype == 1             mysubplot(2,1,1);             plot(xcorrs(id).shapexc,max(xcorrs(id).efficacy(1:2)),'o');             hold on;         end     end     sIm(j,j) = 0;     if plottype ==1         mysubplot(2,1,2);         plot(cells(pairs(j)).dp,cells(pairs(j)).dropi,'o');         hold on;     end end      if plottype == 2;     mysubplot(1,2,1);     hold off;     [X, score, pid] = squishDistanceMatrix(eIm,'min','laps',1);     imagesc(X, 'buttondownfcn',{@ImageHit,'paireffic'});     NewGroups.order = pid;     gl = minmax(find(ismember(pairs(pid),CellGroups.groups{gid})));      xlabels = labels(pid);     set(gca,'ytick',1:length(labels),'yticklabel',xlabels);     set(gca,'xtick',1:length(labels),'xticklabel',xlabels);     title('Efficacy');     fprintf('D%.3f after %d',score(1),score(3));%Anywhere there is nothing on the diagonal 2 away from the center, it%sugests a different grouping     diaga(1) = 1;     len = size(X,1);     for j = 2:size(X,1)         C = NewGroups.cells(pid(j));         diaga(j) = min([X(j,j-1) X(j-1,j)]);         if C.cell > 0             text(j,j,sprintf('Cell %d',C.cell),'color','w',...                 'horizontalalignment','center','verticalalignment','middle');         end     end     breaks = diaga < prctile(diaga,50)/2;%     breaks = find(breaks);     a = find(diff(breaks)>0);         b = find(diff(breaks)<0);         hold on;     if isempty(a)         ix = 1;     else         ix = a(1);     end     for j = 2:length(a)         groups{j-1} = ix:a(j);         PC.DrawBox([ix a(j)],[ix a(j)],'duplicates');         ix = a(j)+1;     end     if breaks(end) == 0 && ~isempty(a)         PC.DrawBox([a(end)+1 len],[a(end)+1 len],'duplicates');     end     PC.DrawBox([gl],[gl],'duplicates','color','y');             sIm = RemapSquareMatrix(sIm, pid);              mysubplot(1,2,2);     imagesc(sIm, 'buttondownfcn',{@ImageHit,'paireffic'});     set(gca,'ytick',1:length(labels),'yticklabel',xlabels);     set(gca,'xtick',1:length(labels),'xticklabel',xlabels);     setappdata(F,'CellGroups',NewGroups);     gid = find(cellmember(p,CellGroups.groups));     if length(gid) ==1      gid = CellGroups.groups{gid};     end     title('Shape Crosscorr');     PC.SetFigure(DATA,DATA.tag.misc);     hold off;     udup = union(udup,gid);     k = 0;     for j = 1:length(udup)         C = cells(udup(j));         x = cells(udup(j)).dp;         y = cells(udup(j)).dropi;         if ismember(udup(j), gid)             k = k+1;             h = plot(x,y,'o','markerfacecolor',DATA.colors{k});         else             plot(x,y,'o');         end         h = text(x,y,sprintf('%d/%d',C.p,C.cl),'horizontalalignment','left','verticalalignment','bottom');         hold on;     end     xlabel('Cluster Separation');     ylabel('Drop Index'); end if diff(p) == 0 %hit diagonal     PC.ShowData(DATA, DATA.currentpoint(1), cells(p(1)).p); end      function groups = GroupDuplicates(DATA, xid)      ts = now;     xcorrs = getappdata(DATA.toplevel,'xcorrs');     D = getappdata(DATA.toplevel,'duplicates');     duplicates = D.probes;     cells = getappdata(DATA.toplevel,'xcCellList');     probes = [cells.p] + [cells.cl]/10;     p = unique(cat(1,xcorrs(xid).p));     p = xid;  %index is to cells, not xcorrs     xprobes = cat(1,xcorrs.p);           nd = 0;     for j = 1:length(duplicates)         if sum(ismember(p,duplicates{j}))             if nd == 0                 nd = 1;                 dupset{nd} = duplicates{j};             end             if ~isempty(setdiff(duplicates{j},cat(1,dupset{:})))                 nd = nd+1;                 dupset{nd} = duplicates{j};             end         end     end      pairs = unique(cat(1,dupset{:}));          for j = 1:length(pairs)         labels{j} = sprintf('%.1f',probes(pairs(j)));     for k = 1:(j-1)         id = find(xprobes(:,1) == pairs(j) & xprobes(:,2) == pairs(k));         eIm(j,k) = xcorrs(id).efficacy(1);         eIm(k,j) = xcorrs(id).efficacy(2);         sIm(j,k) = xcorrs(id).shapexc;         sIm(k,j) = xcorrs(id).shapexc;     end     sIm(j,j) = 0;     end      [X, score, pid] = squishDistanceMatrix(eIm,'min','laps',1);%Anywhere there is nothing on the diagonal 2 away from the center, it%sugests a different grouping     diaga(1) = 1;     len = size(X,1);     for j = 2:size(X,1)         diaga(j) = min([X(j,j-1) X(j-1,j)]);     end     [igroups, details] = GroupByOverlap(X);     groups = {};     for j = 1:length(igroups)         groups{j} = pairs(pid(igroups{j}));     end          fprintf('%d Groups   ',length(groups));     for j = 1:length(groups)         id = groups{j};         bid = id(find(ismember(id,D.best)));         if ~isempty(bid)             bstr = sprintf('Best%s.',sprintf(' %d',bid));         else             bstr = 'NoBest';         end         fprintf('   %d: %s(%s)%s\n',j,sprintf(' %.1f',probes(id)),sprintf(' %.0f',id),bstr);     end     fprintf('Took %.2f at %s\n',mytoc(ts),datestr(now));          hold off;     imagesc(X);     caxis([0 1]);     xlabels = labels(pid);     set(gca,'ytick',1:length(labels),'yticklabel',xlabels);     set(gca,'xtick',1:length(labels),'xticklabel',xlabels);     hold on;     for j = 1:length(igroups)         PC.DrawBox([min(igroups{j}) max(igroups{j})],[min(igroups{j}) max(igroups{j})],{@HitImage});     end     drawnow;  function SetDuplicateMenu(a,b,fcn, varargin)      DATA = GetDataFromFig(a);        F = GetFigure(a);       cells = getappdata(DATA.toplevel,'xcCellList');       xcorrs = getappdata(DATA.toplevel,'xcorrs');       if isappdata(F,'CellGroups')           CellGroups = getappdata(F,'CellGroups');       end       eid = DATA.currentpoint(1);       if sum(strcmp(fcn,{'setinteractive' 'noninteractive'}))           for j = 1:length(CellGroups.groups)                              G = CellGroups.groups{j};               if length(G) > 1               cellid = CellGroups.cellid(G);               cellid = G(cellid > 0);               if isempty(cellid)                   cellid = BestCell(cells,G);                   cellno = 100;               elseif length(cellid) > 1                   cellid = BestCell(cells,cellid);                   cellno = CellGroups.cellid(cellid);               else                   cellno = CellGroups.cellid(cellid);               end               dup = setdiff(G,cellid);               s = sprintf('Cell%d on %d/%d. Duplicates%s',cellno,...                   cells(cellid).p,cells(cellid).cl,sprintf('%d/%d ',[cells(dup).p],[cells(dup).cl]));               if strcmp(fcn,'setinteractive')                   if cellno == 100                       s = sprintf('No cell in group. Best probe is %d/%d. Duplicates%s. Set Cell to 100? ',...                           cells(cellid).p,cells(cellid).cl,sprintf('%d/%d ',[cells(dup).p],[cells(dup).cl]));                       yn = questdlg(s);                   else                       yn = questdlg([s '. Apply To CellList?']);                   end               else                   if cellno == 100                       fprintf('No Cell in Group %s. Setting all to duplicates of 100\n',sprintf('%d/%d ',[cells(G).p],[cells(G).cl]));                   else                       fprintf('Applying %s to CellList\n',s);                   end                   yn = 'Yes';               end               if strcmp(yn,'Yes')                   for j = 1:length(dup)                       C= cells(dup(j));                       DATA.CellList(eid,C.p,C.cl) = -cellno;                   end                   C= cells(cellid);                   if cellno == 100 && strcmp(fcn,'noninteractive')                       DATA.CellList(eid,C.p,C.cl) = -100;                   else                       DATA.CellList(eid,C.p,C.cl) = cellno;                   end               end               end           end           PC.SaveCellList(DATA,'backup');           set(DATA.toplevel,'UserData',DATA);       elseif strcmp(fcn,'allexpts')           [C, DATA] = PC.CheckClusterLoaded(DATA, 1:length(DATA.exptid));           DATA.options.efficonly = 1;           DATA.plot.xcorrpoptype = 'duplicates';           ts = now;           AllGroups = {};           for j = 1:length(DATA.exptid)               te = now;               Clusters = C{j};               cells = PC.ClusterList(DATA, Clusters);               DATA.currentpoint(1) = j;               PC.SetFigure(DATA,DATA.tag.xcorr);               fprintf('Calculating Efficacies for Expt %d at %s. Taken %.1f sec\n',DATA.exptid(j),datestr(now),mytoc(ts));               [allcells{j}, allxcorrs{j}] = PlotAllXcorr(DATA, Clusters,cells,'callback',@PC.PlotXcorr, 'efficonly');               AllGroups{j} = PlotExptDuplicates(DATA,'figtag',['Duplicates' num2str(j)]);               AllGroups{j}.cellstruc = allcells{j};               AllGroups{j}.xcorrs = allxcorrs{j};               AllGroups{j}.dur = mytoc(te);           end                      fprintf('All Expt Duplicates Took %.1f\n',mytoc(ts));           setappdata(DATA.toplevel,'AllGroups',AllGroups);       end  function SetDuplicateGUI(a,b,fcn, varargin)      DATA = GetDataFromFig(a);        F = GetFigure(a);       pos = round(get(gca,'currentpoint'));       cells = getappdata(DATA.toplevel,'xcCellList');       xcorrs = getappdata(DATA.toplevel,'xcorrs');       cid(1) = pos(1,1);       cid(2) = pos(1,2);       if isappdata(F,'CellGroups')           CellGroups = getappdata(F,'CellGroups');           cid = CellGroups.order(cid);       end       pid = cat(1,xcorrs.p);       aid = find(pid(:,1) == cid(1) & pid(:,2) == cid(2));       bid = find(pid(:,2) == cid(1) & pid(:,1) == cid(2));       id = unique([aid bid]);       eid = DATA.currentpoint(1);       if strcmp(fcn,'showspikes')           PC.SetFigure(DATA,DATA.tag.allspikes);           subplot(1,1,1);           PC.PlotSyncSpikes(DATA, DATA.currentpoint(1), floor(xcorrs(id).probe), round(rem(xcorrs(id).probe .*10,10)));       elseif strcmp(fcn,'showgroupspikes')           gid = find(cellmember(cid,CellGroups.groups));           G = CellGroups.groups{gid};           PC.SetFigure(DATA,DATA.tag.allspikes);           ClearPlot;           [probes, pid] = unique([cells(G).p]);           for j = 1:length(probes)               mysubplot(1,length(probes),j);               cl = cells(G(pid(j))).cl;               PC.QuickSpikes(DATA, [DATA.currentpoint(1) probes(j)],'labelpos','left');               h = title(sprintf('P%dC%d',probes(j),cl));               set(h,'color',DATA.colors{1+cl});           end       elseif strcmp(fcn,'setduplicates')           cellid = varargin{1};           cid = varargin{2};           gid = find(cellmember(cid,CellGroups.groups));           G = CellGroups.groups{gid};           dup = setdiff(G,cid);           for j = 1:length(dup)               C= cells(dup(j));               DATA.CellList(eid,C.p,C.cl) = -cellid;           end           C= cells(cid(1));           DATA.CellList(eid,C.p,C.cl) = cellid;                 end  function AutoFixDupicates(DATA, eid)             DATA.currentpoint(1) = eid;       F = GetFigure(DATA.tag.xcorrpop);      G = getappdata(F,'CellGroups');      cells = getappdata(DATA.toplevel,'xcCellList');      for j = 1:length(CellGroups.groups)          cellid = G.cells(G.groups{j});          cellid = cellid(cellid > 0);          if isempty(cellid)              p = BestCell(cells,G.groups{j});          elseif length(cellid) > 1              cellid = BestCell(cells,cellid);                        end          cellno = G.cells(cellid);          dup = setdiff(G.groups{j},cellid);          for j = 1:length(dup)              C= cells(dup(j));              DATA.CellList(eid,C.p,C.cl) = -cellno;          end          C= cells(cellid);          DATA.CellList(eid,C.p,C.cl) = cellno;      end        function best = BestCell(cells, ix)  % best = BestCell(cells, ix) given a group of clusters, find one wih best isolation  %cells is a strcut with dp and dropi, as used in PlotXcorrAll        d = -[cells(ix).dp];        d(d < 0) = 0;        [dp, dpi] = sort(d);        [drops, dropi] = sort([cells(ix).dropi]);        [a,b] = sort(d .* [cells(ix).dropi]);        best = ix(b(end));             function UG = SubsumeGroups(G)    UG{1} = G{1};    for j = 2:length(G)        subset = 0;        for k = 1:length(UG)            ni = length(intersect(G{j},UG{k}));            if ni == min([length(UG{k}) length(G{j})])                [~,subset] = max([length(UG{k}) length(G{j})]);                if subset == 2 %G is longer than UG                    subsets(k) = j;                    UG{k} = G{j};                else                    subsets(j) = k;                end            elseif (ni+1) == min([length(UG{k}) length(G{j})]) && ni > 1%same except for 1            [~,subset] = max([length(UG{k}) length(G{j})]);                if subset == 2 %G is longer than UG                    subsets(k) = j;                    UG{k} = G{j};                else                    subsets(j) = k;                end            end        end        if ~subset            UG{end+1} = G{j};        end    end    subset = 0;     function [UG, gid] = uniquegroups(G)        UG{1} = G{1};        gid(1) = 1;         for j = 2:length(G)             old = 0;             for k = 1:length(UG)                 if sum(ismember(G{j},UG{k})) == length(UG{k})                     old = 1;                 end             end             if ~old                 UG{end+1} = G{j};                 gid(end+1) = j;             end         end         