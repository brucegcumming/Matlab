function [DataClusters, FullVData] = LoadDataClusters(DATA)    DataClusters = {};    FullVData = [];    gotcfile = 0;    cfile = AllV.ClusterFile(DATA.name,DATA.Expt,'subdir',DATA.clustersubdir);    if exist(cfile,'file')        load(cfile);        DataClusters = Clusters;        if isfield(DATA,'TemplateScores') %out of date            DATA = rmfields(DATA,'TemplateScores','TemplateUsed');        end        if length(Clusters) >= DATA.probe(1) & DATA.plottype == 3 & isfield(Clusters{DATA.probe(1)},'mean') %need to recalculate            oldscores = 1;        end        gotcfile = length(Clusters);    end        AutoClusters = {};    if gotcfile < DATA.allnprobes    afile = AllV.ClusterFile(DATA.name,DATA.Expt,'auto','subdir',DATA.clustersubdir);    if exist(afile,'file')        load(afile);       AutoClusters = AllV.CondenseClusters(Clusters,0);    end    end    useauto = zeros(1,DATA.nprobes);    for j = 1:length(AutoClusters)        if j > length(DataClusters) ||  ~isfield(DataClusters{j},'mahal')            DataClusters{j}.auto = 1;            useauto(j) = 1;        end        if isfield(DataClusters{j},'savetime')            if DataClusters{j}.auto == 1 && AutoClusters{j}.savetime(1) > DataClusters{j}.savetime(1)                DataClusters{j} = AutoClusters{j};                DataClusters{j}.auto = 1;                useauto(j) = 1;            end        elseif isfield(DataClusters{j},'mahal')            DATA = AllV.AddErr(DATA,'Probe %d no savetime\n',j);        else            useauto(j) = 1;            if ~isfield(DataClusters{j},'mahal')                DataClusters{j} = AutoClusters{j};                DataClusters{j}.auto = 1;                useauto(j) = 1;            else            DataClusters{j}.savetime = [0 0];            end        end    end    id = find(useauto);    if ~isempty(id)        fprintf('Using AutoCluster for probe%s\n',sprintf(' %d',id));    end    for j = 1:length(DataClusters)        if isfield(DataClusters{j},'next') && ~iscell(DataClusters{j}.next) %old style            last = DataClusters{j}.next;            DataClusters{j} = rmfield(DataClusters{j},'next');            DataClusters{j}.next{1} = rmfields(last,'next'); %get rid of next.next        elseif ~isfield(DataClusters{j},'next') && isfield(DataClusters{j},'mahal')            DataClusters{j}.next = {};        end        if ~isfield(DataClusters{j},'excludetrialids')            DataClusters{j}.excludetrialids = [];        end        if ~isfield(DataClusters{j},'clusterprog')            DataClusters{j}.clusterprog = '';        end        if isfield(DataClusters{j},'next')        for k = 1:length(DataClusters{j}.next)            if isfield(DataClusters{j}.next{k},'mahal') && ~isfield(DataClusters{j}.next{k},'chspk') && isfield(DataClusters{j},'chspk')                DataClusters{j}.next{k}.chspk = DataClusters{j}.chspk;%                DataClusters{j}.next{k}.quick = 0; %should always be zero when saved            end        end        end%% clear any fields that shouldn't be there, but might have been saved by% earlier versions        DataClusters{j} = rmfields(DataClusters{j},'clst','r','xy');%        DataClusters{j}.quick = 0; %should always be zero when saved%Mar 2012 allowed clsuters toe be save "quick" to allow subsequent%quantification to save time.        if ~isfield(DataClusters{j},'marked')            DataClusters{j}.marked = 0;        end        if ~isfield(DataClusters{j},'missingtrials')            DataClusters{j}.missingtrials = [];        end    end    if DATA.checkclusters    AllV.CheckClusters(DataClusters,'Loaded');    AllV.CheckClusters(DataClusters, 'CheckNexts','Loaded');    AllV.CheckClusters(DataClusters,'CheckFitSpace');    end