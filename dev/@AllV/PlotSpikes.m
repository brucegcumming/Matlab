function ph = PlotSpikes(DATA,spkid, varargin)dvdt = 1;fixy = 0;colors = DATA.colors;scale = 1;yl = [];j = 1;quicktest = 1;showall = 0;setcontext = 0;tpt = find(DATA.spts ==0);ph = [];while j <= length(varargin)    if strncmpi(varargin{j},'fixy',3)        if length(varargin) > j & isnumeric(varargin{j+1})            j = j+1;            yl = varargin{j};        else            fixy = 1;        end    elseif strncmpi(varargin{j},'setcontext',7)        setcontext = 1;    elseif strncmpi(varargin{j},'showall',7)        showall = 1;    end    j = j+1;endif DATA.interactive < 0    return;endAllVoltages = AllV.mygetappdata(DATA,'AllVoltages');AllV.SetFigure(DATA.tag.spikes, DATA);if fixy    yl = get(gca,'ylim');endsubplot(1,1,1);if ~isfield(DATA,'clid')    DATA.clid = [];    DATA.nid = 1:DATA.nevents;endif DATA.plotspk.oneprobe    chspk = DATA.probe(1);else    chspk = DATA.plotspk.probes;endif max(spkid) > DATA.nevents    spkid = spkid(spkid<=DATA.nevents);endspkid = spkid(spkid > 0);        if DATA.plotspk.includeprepost            pre = DATA.preperiod;            post = DATA.postperiod;        else            pre = 0;            post = 0;        endif isempty(spkid)    for c= chspk;        if c > 0 & c <= DATA.nprobes        for j = 1:2            h = plot([0 30],[0 0],'color',colors{j});        end        hold on;        end    end    if fixy        set(gca,'ylim',yl);    end    if DATA.plotspk.bytrial        nt = DATA.currenttrial;        T = DATA.Expt.Trials(nt);        title(sprintf('Trial %d %.2f-%.2f: No Spikes  ed%.2f',T.Trial,T.Start(1)-pre,T.End(end)+post,T.ed));    end    return;endif isfield(DATA,'clst') && length(DATA.clst) >= max(spkid)       clst = DATA.clst;    if showall        clst(clst < 1) = 1;    endnc = unique(clst(spkid));nc = nc(nc > 0); %excludes excluded trials/timestwoclusters = 1;else    twoclusters = 0;endif isempty(spkid)    ids{2} = DATA.clid;    ids{1} = DATA.nid;    id = ids{2};   nid = ids{1};elseif DATA.usegmcid && length(DATA.gmcid) >= max(spkid)        nc = unique(DATA.gmcid);        nc = nc(nc > 0);        for j = 1:length(nc)            id = find(DATA.gmcid(spkid) == nc(j));            ids{j} = spkid(id);        endelseif twoclusters    ids = {[] []}; %min necessary    for j = 1:length(nc)    ids{nc(j)} = spkid(find(clst(spkid) == nc(j)));    end    if length(ids) > DATA.currentcluster        id = ids{1+DATA.currentcluster};    else        id = ids{2};    end   nid = ids{1};else    id = find(ismember(spkid,DATA.clid));    nid = find(ismember(spkid,DATA.nid));    ids{2} = spkid(id);    ids{1} = spkid(nid);endispk = DATA.probe;for j = 1:length(ids)    V{j} = AllVoltages(:,:,ids{j});endvoff = DATA.voffset - DATA.voffset(ispk(1));if DATA.plotcsd     AllCSD = AllV.GetCSD(DATA, DATA.plotcsd);    for j = 1:length(ids)        V{j} = AllCSD(:,:,ids{j});    end    if min(ispk) > 1    ispk = ispk-1;    end    voff = (DATA.voffset - DATA.voffset(DATA.probe(1)));elseif DATA.plotdvdtfor j = 1:length(ids)    V{j} = diff(AllVoltages(:,:,ids{j}),1,2);endendif DATA.plotspk.submax    for j = 1:length(V)        V{j} = V{j} - repmat(max(V{j},[],2),[1 size(V{j},2) 1]);    endelseif DATA.plotspk.subtrigger    for j = 1:length(V)        V{j} = V{j} - repmat(V{j}(:,tpt,:),[1 size(V{j},2) 1]);    endelseif DATA.plotspk.submin    for j = 1:length(V)        V{j} = V{j} - repmat(min(V{j},[],2),[1 size(V{j},2) 1]);    endelseif DATA.plotspk.submean    for j = 1:length(V)        V{j} = V{j} - repmat(mean(V{j},[],2),[1 size(V{j},2) 1]);    endendV{j} = V{j} .* scale;if quicktest    l = size(V{1},2);    hold off;    x = [1:l NaN];for c= chspk;    if c > 0 & c <= DATA.allnprobes        for j = 1:length(V)            h(j) = 0;        nV = squeeze(V{j}(c,:,:)) + voff(c);        if length(nV) == 0        elseif size(nV,1) > 1             h(j) = plot([0 30],[0 0],'color',colors{j});            nV(l+1,:) = NaN;            set(h(j),'Ydata',reshape(nV,1,prod(size(nV))),'Xdata',repmat(x,1,size(nV,2)));            hold on;        else            h(j) = plot(1:l,nV,'color',colors{j});            hold on;            end        end        if setcontext && sum(h) > 0 && j > 0            DATA = AllV.AddAxisContextMenu(DATA, gca);            AllV.AddLineContextMenu(DATA, h);        end        if c == DATA.probe(1)            ph = h;        end        if DATA.plotspk.showmean || DATA.cluster.manual ==4            if isfield(DATA.cluster,'MeanSpike')                plot(1:l,DATA.cluster.MeanSpike.ms(c,:)+voff(c),'-','linewidth',2,'color',colors{2});            end            for j = 1:length(DATA.cluster.next)                if isfield(DATA.cluster.next{j},'MeanSpike')                    plot(1:l,DATA.cluster.next{j}.MeanSpike.ms(c,:)+voff(c),'-','linewidth',2,'color',colors{j+2});                end            end        end    endend%draw text after spikes.for c= chspk;    h = text(size(V{1},2)-1,voff(c)+0.5,sprintf('%d',c),'fontsize',DATA.gui.fontsize(1),...        'horizontalalignment','right');    set(h,'fontweight','bold');endif DATA.plotrv    rV = getappdata(DATA.toplevel,'AllrV');    plot(rV(:,spkid),'k-');endelsehold off;for c= [ispk(1)-1:1:ispk(1)+1];    if c > 0 & c <= DATA.nprobes        for j = 1:size(V)            plot(squeeze(voff(c)+V{j}(c,:,:)),'color',colors{j});            hold on;        end        h = text(size(V{1},2),voff(c),sprintf('%d',c),'fontsize',DATA.gui.fontsize(1));    endendendif length(yl) == 2    set(gca,'ylim',yl);endhold off;if DATA.plotspk.bytrial && isfield(DATA.Expt,'Trials');    nt = max([DATA.currenttrial 0]);    T = DATA.Expt.Trials(nt);    c = AllV.TrialMarkChar(T);title(sprintf('Trial %d%c %.2f-%.2f: %d/%d ed%.2f',T.Trial, c,(T.Start(1)./10000)-pre,(T.End(end)./10000)+post, length(id),length(spkid),DATA.Expt.Trials(nt).ed));elsetitle(sprintf('Spikes %d-%d(%.3f-%.3f): %d/%d',...    spkid(1),spkid(end),DATA.t(spkid(1)),DATA.t(spkid(end)),length(id),length(spkid)));endif DATA.plotspk.showfullv && DATA.plotspk.bytrial    tt = [T.Start(1) T.End(end)]./10000 +[-pre post];    AllV.SetFigure('FullV', DATA);    hold off;    Vall = AllV.PlotFullV(DATA,tt);    st = DATA.cluster.spts .* Vall.samper;    VT.ids = ids;    VT.toplevel = DATA.toplevel;    VT.probe = chspk;    VT.spkid = 0;    VT.t = DATA.t;    chspk = AllV.UseProbeList(DATA,DATA.plotspk.nfullvprobes);    for j = 1:length(V)        for k = 1:size(V{j},3)            for p = 1:length(chspk)                plot(st+DATA.t(ids{j}(k)),V{j}(chspk(p),:,k)+voff(chspk(p)),'color',DATA.colors{j});            end        end    end    id = find(Vall.t > tt(1)  & Vall.t < tt(2));    if isfield(Vall,'intscale') && isinteger(Vall.V)        vscale = Vall.intscale(1)./Vall.intscale(2);    else        vscale = 1;    end    for p = 1:length(chspk)        plot(Vall.t(id),double(Vall.V(chspk(p),id)).*vscale+voff(chspk(p)),'k');        hold on;    end    st = DATA.cluster.spts .* Vall.samper;    for j = 1:length(V)        for k = 1:size(V{j},3)            for p = 1:length(chspk)                plot(st+DATA.t(ids{j}(k)),V{j}(chspk(p),:,k)+voff(chspk(p)),'color',DATA.colors{j});            end        end    end    axis('tight');    if isfield(DATA,'onespiketime')        for j = 1:length(DATA.onespiketime)            plot([DATA.onespiketime./10000 DATA.onespiketime./10000],get(gca,'ylim'),'b:');        end    end    set(gcf,'UserData',VT,'KeyPressFcn',{@FullVKeyPressed});end