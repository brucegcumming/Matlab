function [xy, cid, details] = ProjectND(DATA, best, obj)    pnorm = 0;    details.err = 0;    if size(obj.mu,1) > 2        v = range(obj.mu);    else        v = diff(obj.mu);    end    if best ==1 && size(v,2) ~= 4        details.err = 1;        xy(:,1) = DATA.pcs(:,1);        xy(:,2) = DATA.pcs(:,2);        cid = [];        DATA = AllV.AddErr(DATA,'ERROR! Dimension mismatch\n');        return;    end        if best == 1            sd = std(DATA.pcs(:,[1 2 3 4]));            v = v(1:4)./sd;        if pnorm            S(:,1) = DATA.pcs(:,1) ./ sd(1);            S(:,2) = DATA.pcs(:,2) ./ sd(2);            S(:,3) = DATA.pcs(:,3) ./ sd(3);            S(:,4) = DATA.pcs(:,4) ./ sd(4);        else            S = DATA.pcs(:,1:4);        end    elseif best == 2    elseif best == 3        if isfield(DATA,'AllVoltages')        S = squeeze(DATA.AllVoltages(DATA.probe(1),DATA.vspace,:))';        else        AllVoltages = AllV.mygetappdata(DATA,'AllVoltages');        S = squeeze(AllVoltages(DATA.probe(1),DATA.vspace,:))';        end    elseif ismember(best, [4 7])        nd = find(DATA.tmplspace(best-3,:) > 0);        if pnorm        sd = std(DATA.TemplateScores(:,DATA.tmplspace(best-3,nd)));        v = v./sd;        for j = 1:nd            S(:,j) = DATA.TemplateScores(:,DATA.tmplspace(1,j)) ./ sd(j);        end        else            S = DATA.TemplateScores(:,DATA.tmplspace(best-3,nd));        end%        xy(:,1) = v([1 5]) * S(:,[1 5])'; %test        end                if best == 2            xy(:,1) = DATA.energy(1,:);            xy(:,2) = DATA.spkvar(DATA.probe(1),:)./DATA.energy(1,:);            S = xy;        elseif size(v,2) == size(S,2)            xy(:,1) = v * S';        else            fprintf('ERROR! Dimension mismatch\n');        end    ov = v;    ov(1) = v(2);    ov(2) = -v(1);    if length(v) > 3    ov(3) = v(4);    ov(4) = -v(3);    end    if length(v) > 10 %make this 5 to activate    ov(5) = v(6);    ov(4) = -v(5);    end    if size(ov,2) == size(S,2)    xy(:,2) = ov * S';%apply an arbitray sign convetion, so that this isnt' just set byt%the order of teh two means in the fitfixsign = 0;    if mean(xy(:,1)) < 0 && fixsign        xy(:,1) = -xy(:,1);        xy(:,2) = -xy(:,2);    end    else        xy = S(:,1:2);    end    if size(obj.mu,2) ~= size(S,2)             DATA = AllV.AddErr(DATA,'ERRROR! Dimensions of space don''t match fit\n');            showerrs = 0;            if showerrs            errordlg(sprintf('Fit %d dimensions, data %d',size(obj.mu,2),size(S,2)),'Fit Dimension Error','modal');            end            cid = ones(1,size(S,1));            details.err = 1;    elseif ~isobject(obj)            DATA = AllV.AddErr(DATA,'ERRROR! Final GM fit Failed\n');            cid = ones(1,size(S,1));            details.err = 2;    else        cid = cluster(obj, S);% mahal distance is unsigned, not so useful    end    if length(cid) > length(DATA.uid)        id = setdiff(1:length(cid),DATA.uid);        cid(id) = 0;    end    if length(unique(cid)) == 1        fprintf('GM clustering only 1 group\n');    end