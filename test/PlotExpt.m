function result = PlotExpt(name, varargin)

% result = PlotExpt(name,'varargin')
%
% Plots mean counts as a function of relevant stimulus parameters
% for experiments generated by binoc/replay. The parameters plotted
% are determined by the file name (see list below). E.G. if the 
% file name contains
% "SFM", rate will be plotted as a function of stimulus spatial
% frequency, separately for each eye.
%
% returns result, a structure with four vectors, whose length is
% the number of different stimuli. 
% result.x        the value of the stimulus parameter.
% result.means    the mean spike count
% result.n        number of trials in the average.
% result.sd       S.D. of the rate.
% result.flags    always zero (!!)
%
%
% result = PlotExpt(name, 'Hold') turns hold on before plotting.
%
%
%older files are plotted according to their Name, later files are plotted
%according to the experiment types recorded in Stimvals.
%PlotExpt(,....'auto') forces files with recognized names to be plotted
%according to what is in Stimvals too.
%
%PlotExpt(Expt,'psych') splits data into two according to psych choices,
%and plots psf. 

%PlotExpt(Expt,'psych','cp') calculates choice probability, and plots rates
%'cpt' plots mean sdf by choice, 'cph' plots spikecount histograms by
%PlotExpt(Expt,'cpt','eyem') adds mean eye position traces to timecourse
%
%PlotExpt(Expt,'blocks')
%                       Plots data for each Block separately
%PlotExpt(Expt,'blocks',2)
%                       Plots data for each Block in a separate figure
%
%PlotExpt(Expt,'block',blockids)
%                       Plots data only for the blocks in blockids. Look in 
%                       Expt.Header.BlockStart for a list




figtag = 'PlotExpt';
btype = 'e0';
collapse = 0;
profiling = 0;
getlfp = 0;
nvar = nargin - 1;
j = 1; k = 1; nrc = 1;
reverse = 0;
varargon = {};
rcargs = {};
zval = 0;
showblocks = 0;
showtrials = 1;
showseq =  0;
ignorename = 1;
condense = 0;
getcp = 0;
nresample = 0;
sdfw = 100;
getem = 0;
showplot = 1;
holdon = 0;
plotpsych = 0;
nmin = 0;
minr = 0.1;
npsych = 5;
emskip = 0;
em.maxdrift = 0;
em.stattime = [1500 21000];
linecolor = 'b';
psychtag = 'Psych';
cptag = 'CPplot';
detrend = 0;

centerRFvals = 0;

figbtag = [];
consecpsych = [];
CPtag = [];
mainfig = gcf;

while j  <= nvar
  str = varargin{j};
  if strncmpi(str,'holdon',4)
      holdon = 1;
      varargon{k} = varargin{j}; k = k+1;      
  elseif strncmpi(str,'zval',4)
      j = j+1;
      zval = varargin{j};
  elseif strncmpi(str,'reverse',4)
      reverse = 1;
  elseif strncmpi(str,'centerRF',8)
      centerRFvals = 1;
  elseif strncmpi(str,'collapse',4)
      j = j+1;
      collapse = varargin{j};
  elseif strncmpi(str,'condense',4)
      condense = 1;
  elseif strncmpi(str,'consec',4)
      j = j+1;
      consecpsych = varargin{j};
  elseif strncmpi(str,'emskip',4)
      j = j+1;
      emskip = varargin{j};
  elseif strncmpi(str,'emdiff',4)
      getem = 3;
      if length(varargin)  > j & isstruct(varargin{j+1})
          j = j+1;
          em = varargin{j};
      end
  elseif strncmpi(str,'eyem',4)
      getem = 1;
      if length(varargin)  > j & isstruct(varargin{j+1})
          j = j+1;
          em = varargin{j};
      end
  elseif strncmpi(str,'usename',4)
      ignorename = 0;
  elseif strncmpi(str,'blocks',6)
      showblocks = 1;
      if strncmpi(str,'blockseach',7)
          showblocks = 2;
      end
      if length(varargin) > j & isnumeric(varargin{j+1})
          j = j+1;
          showblocks = varargin{j};
      end
  elseif strncmpi(str,'block',5)
      j = j+1;
      useblocks = varargin{j};
      varargon{k} = 'block';
      k = k+1;
      varargon{k} = useblocks;
      k = k+1;
  elseif strncmpi(str,'cptag',5)
       j = j+1;
       CPtag = varargin{j};
  elseif strncmpi(str,'cpt',3)
      getcp = 2;
  elseif strncmpi(str,'cphist',3)
      getcp = 3;
  elseif strncmpi(str,'cpgrand',3)
      getcp = 4;
  elseif strncmpi(str,'cpsac',4)
      getcp = 1;
      getem = 2;
      if length(varargin)  > j & isstruct(varargin{j+1})
          j = j+1;
          em = varargin{j};
      end
  elseif strncmpi(str,'cp',2)
      getcp = 1;
  elseif strncmpi(str,'detrend',5)
      detrend = 40;
      if length(varargin) > j & isnumeric(varargin{j+1})
          j = j+1;
          detrend = varargin{j};
      end
  elseif strncmpi(str,'seqt',4)
      showseq = 2;
  elseif strncmpi(str,'seqid',4)
      showseq = 3;
  elseif strncmpi(str,'sequence',3)
      showseq = 1;
  elseif strncmpi(str,'fbox',4)
      rcargs{nrc} = 'fbox';
      nrc = nrc+1;
  elseif strncmpi(str,'figb',4)
      varargon{k} = varargin{j}; k = k+1;
      j = j+1;
      figbtag = varargin{j};
      varargon{k} = varargin{j}; k = k+1;
  elseif strncmpi(str,'rcfiga',6)
      varargon{k} = 'figa'; k = k+1;
      j = j+1;
      varargon{k} = varargin{j}; k = k+1;      
  elseif strncmpi(str,'figa',4)
      varargon{k} = varargin{j}; k = k+1;
      j = j+1;
      varargon{k} = varargin{j}; k = k+1;
      if isnumeric(varargin{j})
          figure(varargin{j});
          hold off;
      else
          GetFigure(varargin{j});
          figtag = varargin{j};
          hold off;
      end
  elseif strncmpi(str,'figPsych',4)
      varargon{k} = varargin{j};
      k = k+1;
      psychtag = varargin{j+1};
      j = j+1;
      varargon{k} = varargin{j};
      k= k+1;
 elseif strncmpi(str,'forcecolor',8)
      varargon{k} = varargin{j};
      k= k+1;
      j = j+1;
      varargon{k} = varargin{j};
      k= k+1;
      linecolor = varargin{j};
  elseif strncmpi(str,'minr',4)
      j = j + 1;
      minr = varargin{j};
  elseif strncmpi(str,'nmin',4)
      varargon{k} = varargin{j};
      k = k+1;
      j = j + 1;
      varargon{k} = varargin{j};
      k = k+1;
      nmin = varargin{j};
  elseif strncmpi(str,'rcnmin',4)
      rcargs{nrc} = 'nmin';
      nrc = nrc+1;
      j = j + 1;
      rcargs{nrc} = varargin{j};
      nrc = nrc+1;
  elseif strncmpi(str,'npsych',4)
      j = j + 1;
      npsych = varargin{j};
  elseif strncmpi(str,'resample',4)
      j = j + 1;
      nresample = varargin{j};
  elseif strncmpi(str,'Psych',4)
      plotpsych = 1;
      varargon{k} = varargin{j};
      k = k+1;
  elseif strncmpi(str,'twoslice',4)
      rcargs{nrc} = 'twoslice';
      nrc = nrc+1;
          str = varargin{j};
  elseif strncmpi(str,'Type2',5)
      varargon{k} = varargin{j};
        j = j+1;
      varargon{k} = varargin{j};
      btype = varargin{j};
  else
      varargon{k} = varargin{j};
      if strncmpi(str,'lfp',3)
          getlfp = 1;
          if strncmpi(str,'lfpforce',6)
              getlfp = 2;
          elseif strncmpi(str,'lfpwr',5)
              getlfp = 3;
          end
      elseif strncmpi(str,'sdfw',4)
          sdfw = varargin{j+1};
      elseif strncmpi(str,'noplot',4)
          showplot = 0;
      elseif strncmpi(str,'colors',6)  %% these codes have numeric args attached
          k = k+1;
          j = j+1;
          varargon{k} = varargin{j};
          
      end
      k = k+1;
  end
  j = j+1;
end
if holdon
    hold on;
elseif showplot
    hold off;
end


result = [];
if isempty(name)
    return;
end
if ischar(name)
    if ~exist(name,'file')
        fprintf('No file %s\n',name);
        return;
    end

    Expt = LoadExpt(name);
elseif iscell(name)
    colors = mycolors;
    for j = 1:length(name)
        res{j} = PlotExpt(name{j},'forcecolor',colors{j},varargin{:},'holdon');
        h(j) = res{j}(1).handles(1);
        labels{j} = res{j}.name;
        hold on;
    end
    mylegend(h,labels);
    return;
else
Expt = name;
name = Expt.Header.Name;
end

if length(Expt.Trials) < 1
    return;
end

%if ignorename is set to zero by the input args, leave it this way.
if ~isempty(Expt.Stimvals.et) & ~isempty(Expt.Stimvals.e2) & ischar(Expt.Stimvals.et) & ignorename
    ignorename = 1;
else
    ignorename = 0;
end

if isfield(Expt.Trials,'excluded')
    id = find([Expt.Trials.excluded] == 0);
    Expt.Trials = Expt.Trials(id);
end

norc = 0;
if length(Expt.Trials(1).Start) > 2 
    if condense || showseq
            Expt = CondenseRC(Expt);
            duration = prctile([Expt.Trials.End] - [Expt.Trials.Start],90);
            varargon = {varargon{:} 'duration' duration};
            revcor = 0;
    elseif ~ norc
    res = PlotRevCorAny(Expt, varargon{:}, rcargs{:});
    revcor = 1;
    end
else
revcor = 0;
if ~isfield(Expt.Header,'rc')
    Expt.Header.rc = 0;
end
end

if getem & ~isfield(Expt.Trials,'EyeData');
  Expt = LoadEmData(Expt);
  Expt = CheckSaccades(Expt);
elseif getem & ~isfield(Expt.Trials,'Saccades')
  emall = cat(3,Expt.Trials.EyeData);
  sds = mean(std(emall),3);
  if sds(2) < 0.04 & sds(4) < 0.04
  Expt = CheckSaccades(Expt,'thresh',[3 0.6],'lmonoc');
  else
  Expt = CheckSaccades(Expt);
  end
end

if getlfp & isfield(Expt.Header,'Spike2Version')
    Expt = LoadSpike2LFP(Expt);
elseif(getlfp)
  idx = regexp(name,'\.c[0-9]\.');
  lfpname = strrep(name,name(idx:idx+3),'.lfp.');
  if ~exist(lfpname,'file')
      lfpname = strrep(lfpname,'bgc','bgc/bgc');
  end
  if ~exist(lfpname,'file')
    fprintf('No file %s\n',lfpname);
    if(getlfp == 2)
        return;
    end  
    getlfp = 0;

  else
      tic;
    load(lfpname);
    for j = 1:length(LFP.Trials)
      lfplen(j) = length(LFP.Trials(j).LFP);
    end
    lfplen = min(lfplen(find(lfplen > 0)));
    Expt.Header.lfplen = lfplen;
    ftfrq = (0:lfplen-1)/(lfplen/(10000 * LFP.Header.CRsamplerate));
    k = 1;
    powerspec = zeros(lfplen,1);
    for j = 1:length(LFP.Trials)
        if length(LFP.Trials(j).LFP) > 0
            while max(LFP.Trials(j).LFP) > 5000 %not possible
                [a,b] = max(LFP.Trials(j).LFP);
               LFP.Trials(j).LFP(b) = 0;
            end
%            lfpft(:,j) = fft(LFP.Trials(j).LFP(1:lfplen));
            lfpft = fft(LFP.Trials(j).LFP(1:lfplen));
            powerspec = powerspec + abs(lfpft);                
        end
    end
    if profiling
        toc;
    end
    idx = find(ftfrq > 170 & ftfrq < 190);
    [a,b] = max(powerspec(idx));
    if a > 2 * min(powerspec(idx))
        mainsf = ftfrq(idx(b))/3;
    else
        mainsf = 60;
    end

    Expt.Header.LFPsnr = powerspec(idx(b))./mean(powerspec(2:idx(b)-5));
    if getlfp ==3
        GetFigure('LFP Power');
        hold off;
        plot(ftfrq(2:400),powerspec(2:400));
        title(sprintf('%s Mains/Signal = %.1f',splitpath(Expt.Header.Name),Expt.Header.LFPsnr));
    end
  if max(powerspec) < 10e-10
      getlfp = 0;
      fprintf('No real LFP data in %s\n',splitpath(Expt.Header.Name));
  end
  end
  if ~getlfp %% turned off because of error
      for j = 1:length(varargon)
        if strmatch('lfp',varargon{j})
            varargon{j} = '';
        end
      end
  end
end

nrnd = 0;



% first set up dummy variables for things that are encoded in
% Optioncode, make sure RespDir is set for all Trials, and put LFP in if
% required. N.B. LFP.Trials can be larger than Expt.Trials if a cluster was
% only defined for some of the list.
k = 1;
for j = 1:length(Expt.Trials);
  if findstr(Expt.Trials(j).OptionCode,'+rp')
    Expt.Trials(j).rndphase = 1;
    nrnd = nrnd +1;
  else
    Expt.Trials(j).rndphase = 0;
  end
  if isfield(Expt.Trials,'RespDir') & isempty(Expt.Trials(j).RespDir);
      Expt.Trials(j).RespDir = 0;
  end
  if getlfp & ~isfield(Expt.Trials,'FTlfp')
      while LFP.Trials(k).Start < Expt.Trials(j).Start
          k = k+1;
      end
       if LFP.Trials(k).Start == Expt.Trials(j).Start & ~isempty(LFP.Trials(k).LFP)
  %         Expt.Trials(j).rawlfp = LFP.Trials(k).LFP(1:lfplen);
           [Expt.Trials(j).LFP Expt.Trials(j).FTlfp] = FilterLFP(LFP.Trials(k).LFP(1:lfplen),LFP.Header.CRsamplerate,'freq',mainsf);
           k = k+1;
       end
  end
end
if revcor
        result = res;
        result.Data = Expt;
        result.name = Expt.Header.Name;
    if plotpsych
        args = {Expt.Stimvals.et,'Type2',Expt.Stimvals.e2};
        args = CheckExpt(Expt, args);
        GetFigure('Psych');
        hold off;
        ExptPsych(Expt,args{:},varargon{:});
    end
    if showseq == 2
        GetFigure(mainfig);
        PlotSequence(result,find([Expt.Trials.Trial] > 0),[],'showtimes');
    end
    return;
end
if(getlfp & profiling)
    toc;
end

% Bug fix. Some early files left +rp in the .UFF file even though
% it was off in binoc. If every trial appears to be random phase,
% set it to 0 for all.
if nrnd == length(Expt.Trials) & nrnd > 0;
    [Expt.Trials.rndphase] = deal(0);
end

if strstr(name, 'RODP')
    Expt = FillTrials(Expt,'oR');
end
if strcmp(Expt.Stimvals.e2,'pvel') || strncmp(btype,'pvel',4)
    if strncmp(btype,'pvelsign',6)
             Expt = SetPdir(Expt,'bysign');
    else
             Expt = SetPdir(Expt);
    end
             Expt.Stimvals.e2 = 'pvel';
end

if strstr(name,{'PDDP', 'SFRDP', 'RODP', 'OTBW'}) | ignorename
    ignorename = 1;
elseif strfind(name,'SZM')
  args = {'sz', 'Type2', 'me'};
elseif strfind(name,'SZTF')
  args = {'sz', 'Type2', 'tf'};
elseif strfind(name,'TFSZ')
    if reverse
        args = {'sz','LogX','Type2','tf','Blank','RandPhase'};
    else
        args = {'tf','LogX','Type2','sz','Blank','RandPhase'};
    end
elseif strfind(name,'SZ')
    args = {'sz'};
elseif strfind(name,'OPW')
    args = {'Op','Type2','wi'};
elseif strfind(name,'OPM')
    args = {'Op','Type2','me'};
elseif strfind(name,'SFM')
    args = {'sf','Type2','me','LogX'};
elseif strfind(name,'TFSF')
    if reverse
        args = {'sf','LogX','Type2','tf','RandPhase'};
    else
        args = {'tf','LogX','Type2','sf','RandPhase'};
    end
elseif strfind(name,'DPxSF')
    if reverse
        idx = find([Expt.Trials.me]  == 1)
        [Expt.Trials(idx).dp] = deal(1001);
        idx = find([Expt.Trials.me]  == -1)
        [Expt.Trials(idx).dp] = deal(1002);
        args = {'sf','type2','dp','Blank'};
    else
        args = {'dp','type2','sf','Blank','AddMonoc'};
    end
elseif strfind(name,'SF')
    args = {'sf','LogX'};
elseif strfind(name,'LSRL')
%    Expt = LumpExpt(Expt, 'hL', 0.04);
%    Expt = LumpExpt(Expt, 'hR', 0.04);
  args = {'hL','Type2','hR'};
elseif strfind(name,'MF')
  args = {'mf','Type2','rndphase','LogX','Mod'};
elseif strfind(name,'OXM')
  args = {'or','Type2','me', 'Blank'};
elseif strfind(name,'OT')
    if strfind(name,'sqcorrug')
        if reverse
            args = {'or','Type2', 'ip','Blank','Uncorr','Extra','ip] == 90','ip90','Extra','ip] == 270','ip270'};
        else
            args = {'ip','Type2', 'or','Blank','Uncorr','Extra','ip] == 90','ip90','Extra','ip] == 270','ip270'};
        end
    else
        args = {'or', 'Blank'};
    end
elseif strfind(name,'OPM')
  args = {'Op','Type2','me'};
elseif strfind(name,'OP')
  args = {'Op'};
elseif strfind(name,'ODX')
  args = {'dO','Uncorr','AddMonoc','Blank'};
elseif strfind(name,'CEDT')
 args = {'ce','Type2','dx'};
elseif strfind(name,'DTSD')
  args = {'dx','type2','sd','AddMonoc','Uncorr'};
elseif strfind(name,'DT')
  args = {'dx','Uncorr','Blank','AddMonoc'};
elseif strfind(name,'OXAC')
  args = {'dO','Type2','ce','Uncorr','AddMonoc'};
elseif strfind(name,'ACNC')
  args = {'Pd','Type2','nc','Type3','ce','Uncorr','Blank','AddMonoc'};
elseif strfind(name,'AC')
  args = {'dx','Type2','ce','Uncorr','Blank','AddMonoc'};
elseif strfind(name,'TFM')
  args = {'tf','Type2','me','LogX','RandPhase'};
elseif strfind(name,'TF')
  args = {'tf','LogX','RandPhase'};
elseif strfind(name,'DPIC')
  [Expt.Trials.cz] = deal([Expt.Trials.co]);
  idx = find([Expt.Trials.ic] < -0.1);
  for j = 1:length(Expt.Trials)
      if Expt.Trials(j).ic < -0.1
          Expt.Trials(j).cz = -1.* Expt.Trials(j).co;
      else
          Expt.Trials(j).cz = Expt.Trials(j).co;
      end
  end
  args = {'dp','type2','cz','Blank','AddMonoc'};
  if isfield(Expt.Trials,'ce')
      args = {args{:} 'Uncorr'};
  end
elseif strfind(name,'CEDP')
        args = {'ce','type2','Pd'};
elseif strfind(name,'PDCR')
    if reverse
        args = {'cr','type2','Pd','Blank','AddMonoc'};
    else
        args = {'Pd','type2','cr','Blank','AddMonoc'};
    end
elseif strfind(name,'DPCO')
  args = {'dp','type2','co','Blank'};
elseif strfind(name,'CORL')
    if isfield(Expt.Trials,'dp') & zval > 0
        dps = unique([Expt.Trials.dp]);
        idx = find([Expt.Trials.dp] == dps(zval));
        Expt.Trials = Expt.Trials(idx);
    end
    if reverse
        args = {'c0','type2','c1','Blank'};
    else
        args = {'c1','type2','c0','Blank'};
    end
elseif strfind(name,'CO')
  args = {'co','Blank'};
elseif strfind(name,'OxPD')
  args = {'dO','type2','dP','Blank','Uncorr'};
%args = {'dx','type2','dy','Blank','Uncorr'};
elseif strfind(name,'DPP')
  args = {'dp','type2','dq','Blank'};
elseif strfind(name,'DPSD')
  args = {'dp','type2','sd','AddMonoc'};
elseif strfind(name,'DP')
  args = {'dp','uncorr','AddMonoc'};
elseif strfind(name,'OD')
  args = {'or','Type2','me', 'Blank'};
else
    ignorename =1;
end

if strcmp(Expt.Stimvals.et,'or') & strcmp(Expt.Stimvals.e2,'Tw') & length(Expt.Trials(1).or) > 1
    Expt = CondenseOTTW(Expt);
end


if ignorename
        if strcmp(Expt.Stimvals.e2,'Pd') & strcmp(Expt.Stimvals.et,'sM')
            reverse = ~reverse;
        end
        if strcmp(Expt.Stimvals.e2,'e0') & isfield(Expt.Trials,'pi')
            Expt.Stimvals.e2  = 'pi';
        end
        if strcmp(Expt.Stimvals.e2,'or') &&  strcmp(Expt.Stimvals.et,'sO') &&  strcmp(Expt.Stimvals.e3,{'ar'})
            Expt = FillTrials(Expt,'sO');
            args = { 'stimxy', 'Type2', 'xydir', 'Type3','or'};
        elseif isempty(Expt.Stimvals.e2) | ~isempty(strmatch(Expt.Stimvals.e2,'e0')) | collapse == 2
        args = {Expt.Stimvals.et};
    elseif isempty(Expt.Stimvals.e2) | ~isempty(strmatch(Expt.Stimvals.e2,'e0')) | collapse == 1
        args = {Expt.Stimvals.e2};
    else
        if reverse
            args = {Expt.Stimvals.e2,'Type2',Expt.Stimvals.et};
        else
            args = {Expt.Stimvals.et,'Type2',Expt.Stimvals.e2};
        end
    end
%        fprintf('Dont know type for %s\n',name);
    if strcmp(Expt.Stimvals.et,'TwoCylDisp')
        Expt = FillTrials(Expt,'rd');
        args = {'dx', 'Type2', 'rd'};
    end
    if strcmp(Expt.Stimvals.e3,'sM')
        args = {args{:} 'type3' Expt.Stimvals.e3};
    end
    args = CheckExpt(Expt, args);
end

if isfield(Expt.Trials,'ob')
    if isfield(Expt.Trials,'or')
        ormean = mean([Expt.Trials.or]);
        [ors, nor] = Counts([Expt.Trials.or]);
        if strcmp(Expt.Stimvals.e2, 'ob')
            if reverse
                args = { 'cvsign' 'Type2' 'e0'};
                type = 'cvsign';
                type2 = 'e0';
            end
        else %% NOT orXob, but multiple ob = added broadband
            args = {args{:} 'extra' 'ob] > 120' 'Broad'};
        end
    else
        ormean = NaN;
    end
    for j = 1:length(Expt.Trials)
            Expt.Trials(j).cv = sd2cv(Expt.Trials(j).ob);
            if ~isnan(ormean)
                Expt.Trials(j).cvsign = Expt.Trials(j).cv .* sign(Expt.Trials(j).or-ormean);
            end
    end
end
if centerRFvals;
if isfield(Expt.Trials,'Op') && isfield(Expt.Stimvals,'rOp')
    for j = 1:length(Expt.Trials)
        Expt.Trials(j).Op = Expt.Trials(j).Op - Expt.Stimvals.rOp;
    end
end
if isfield(Expt.Trials,'Pp') && isfield(Expt.Stimvals,'rPp')
    for j = 1:length(Expt.Trials)
        Expt.Trials(j).Pp = Expt.Trials(j).Pp - Expt.Stimvals.rPp;
    end
end
end
if showblocks
    for j = 1:length(Expt.Header.BlockStart) -1
        if showblocks == 2 & j > 1
            GetFigure(sprintf('PlotExpt%d',j));
        end
        result = PlotRates(Expt, args{:},varargon{:},'block',j);
        if showblocks == 1
            hold on;
        end
    end
elseif ~isempty(consecpsych)
    varargon = {varargon{:} 'psych'};
    Expt = FillTrials(Expt,consecpsych,'consec');
    aExpt = Expt;
    aExpt.Trials = Expt.Trials(find([Expt.Trials.consec] >= 3));
    bExpt = Expt;
    bExpt.Trials = Expt.Trials(find([Expt.Trials.consec] < 3));
    [aresult, Expt] = PlotRates(aExpt, args{:},varargon{:});
    if ~isfield(aresult,'psych')
        aresult(1).psych = [];
        psf = [];
    else
        psf = aresult(2).psych;
    end
    [bresult, Expt] = PlotRates(bExpt, args{:},varargon{:});
    if ~isfield(bresult,'psych')
        bresult(1).psych = [];
    end
    if length(fieldnames(aresult)) == length(fieldnames(bresult))
        result = [aresult bresult];
    else
        result = [];
    end
    hold on;
   % plot([psf.data.x],[psf.data.p],'o');
   if ~isempty(psf)
       res =fitpsf(psf.data,'showfit',psf,'color',[0 0 1]);
       if ~isempty(bresult(2).psych)
       legend([res.fith bresult(2).psych.fith],...
           {sprintf('High %d',sum([res.data.n])) sprintf('Low %d',sum([bresult(2).psych.data.n]))});
       end
   end
else
    if ~isfield(Expt.Trials,args{1})
    Expt = FillTrials(Expt,args{1});
    end
    [result, Expt] = PlotRates(Expt, args{:},varargon{:});
end

if strcmp(Expt.Stimvals.et,'Op') && ~centerRFvals && isfield(Expt.Stimvals,'rOp')
    plot([Expt.Stimvals.rOp Expt.Stimvals.rOp], get(gca,'ylim'),':','color',linecolor);
end
if strcmp(Expt.Stimvals.et,'Pp') && ~centerRFvals && isfield(Expt.Stimvals,'rPp')
    plot([Expt.Stimvals.rPp Expt.Stimvals.rPp], get(gca,'ylim'),':','color',linecolor);
end
if ~isempty(result)
    if plotpsych & isfield(Expt.Trials,'RespDir')
        idx = find([Expt.Trials.RespDir] ~= 0);
        Expt.Trials = Expt.Trials(idx);
        if getcp == 0
            if strcmp(Expt.Stimvals.e2,'ob')
                isz = [Expt.Trials.ob] > 120;
                sig = [Expt.Trials.or] > mean([Expt.Trials.or]);
                if mean([Expt.Trials(sig).RespDir]) > mean([Expt.Trials(~sig).RespDir])
                    psig = mean([Expt.Trials(sig).or]);
                else
                    psig = mean([Expt.Trials(~sig).or]);
                end
            elseif strcmp(Expt.Stimvals.et,'Dc')
                et = Expt.Stimvals.e2;
                isz = [Expt.Trials.Dc] <0.01;
                sig = [Expt.Trials.(et)] > mean([Expt.Trials.(et)]);
                if mean([Expt.Trials(sig).RespDir]) > mean([Expt.Trials(~sig).RespDir])
                    psig = mean([Expt.Trials(sig).(et)]);
                else
                    psig = mean([Expt.Trials(~sig).(et)]);
                end
            elseif strcmp(Expt.Stimvals.et,'TwoCylDisp')
                et = 'dx';
                isz = [Expt.Trials.dx] <0.01;
                sig = abs([Expt.Trials.(et)]) > mean(abs([Expt.Trials.(et)]));
                if mean([Expt.Trials(sig).RespDir]) > mean([Expt.Trials(~sig).RespDir])
                    psig = mean([Expt.Trials(sig).(et)]);
                else
                    psig = mean([Expt.Trials(~sig).(et)]);
                end
            else
                et = Expt.Stimvals.et;
                isz = abs([Expt.Trials.(et)]) <0.01;
                sig = [Expt.Trials.(et)] > mean([Expt.Trials.(et)]);
                if mean([Expt.Trials(sig).RespDir]) > mean([Expt.Trials(~sig).RespDir])
                    psig = mean([Expt.Trials(sig).(et)]);
                else
                    psig = mean([Expt.Trials(~sig).(et)]);
                end
            end
            pidx = find([Expt.Trials.RespDir] == 1 & isz);
            nidx = find([Expt.Trials.RespDir] == -1 & isz);
            [cp, details] = CalcCP([Expt.Trials(pidx).count],[Expt.Trials(nidx).count],args{:});
            t = get(get(gca,'title'),'String');
            title(sprintf('%s CP%.3f(P%.2f)',t,cp,psig));
        end
    else
        plotpsych = 0;
    end
    result(1).Data = Expt;
end
if getlfp & profiling
    toc;
end


%
% for this to be true, 'psych' must have been set, so the current figure
% will now be the psych figure.
if getcp & length(result) > 1
    if ~isempty(CPtag)
        GetFigure(CPtag);
        if holdon
            hold on;
        else
            hold off;
        end
    end
    ctype = 'or';
    if detrend > 0
        result = DeTrendExpt(result,'width',detrend);
    end
    
    
    Trials = result(1).Data.Trials;
    [Trials.e0] = deal(0);
 %
 % eed to determine which value of exp is pref, and which value of
 % exp2 is ambigous. If maxob is set, this is an expt where large values
 % of exp2 are the ambiguous ones. If Maxob is Nan, the smallest value of
 % expt2 (usually 0) is ambiguous
    maxob = NaN;
    minob = NaN;
    sigsign = 1;
    if strcmp(Expt.Stimvals.e2, 'ob')
        maxob = 100;
        ctype = 'or';
        ptype = Expt.Stimvals.e2;
        if max([Trials.ob]) < maxob
            maxob = max([Trials.ob]) - 10;
        end
        e2vals = [Trials.ob];
        e1vals = [Trials.or];
        sigsign = -1; %large ob = small signal
    elseif strcmp(Expt.Stimvals.e2,'Tw')
        ctype = 'or';
        maxob = 18;
        if max([Trials.Tw]) < maxob
            maxob = max([Trials.Tw]);
        end
        e2vals = [Trials.Tw];
        e1vals = [Trials.or];
    elseif strcmp(Expt.Stimvals.e2,'Dc')
        ctype = 'dx';
        e2vals = [Trials.Dc];
        e1vals = [Trials.dx];
    elseif strcmp(Expt.Stimvals.e2,'Id')
        ctype = Expt.Stimvals.et;
        e1vals = [Trials.Id];
        e2vals = [Trials.(ctype)];
        minob = 0;
        ptype = ctype;
    elseif strcmp(Expt.Stimvals.et,'dx')
        ctype = Expt.Stimvals.et;
        e1vals = [Trials.e0];
        e2vals = [Trials.(ctype)];
        minob = 0;
        ptype = ctype;
    elseif strcmp(Expt.Stimvals.et,'Dc')
        ctype = Expt.Stimvals.e2;
        e2vals = [Trials.Dc];
        e1vals = [Trials.(ctype)];
        ptype = ctype;
        minob = min(e2vals);
        sigsign = 1;
    else
        e1vals = [Trials.(Expt.Stimvals.et)];
        e2vals = [Trials.(Expt.Stimvals.e2)];
        ctype = Expt.Stimvals.e2;
        ptype = Expt.Stimvals.et;
    end
    
    if isnan(minob)
        minob = min(e2vals);
    end
    if isnan(maxob)
        pidx = find(e2vals == minob & [Trials.RespDir] < 0 & [Trials.Trial] > 0);
        nidx = find(e2vals == minob & [Trials.RespDir] > 0 & [Trials.Trial] > 0);
        goodidx = find(e2vals >0 & [Trials.RespDir] .*  [Trials.rwdir] == 1 & [Trials.Trial] > 0);
        erridx = find(e2vals > 0 & [Trials.RespDir] .* [Trials.rwdir] == -1 & [Trials.Trial] > 0);
    else
        pidx = find(e2vals >= maxob & [Trials.RespDir] < 0 & [Trials.Trial] > 0);
        nidx = find(e2vals >= maxob & [Trials.RespDir] > 0 & [Trials.Trial] > 0);
        goodidx = find(e2vals < 51 & [Trials.RespDir] .*  [Trials.rwdir] == 1 & [Trials.Trial] > 0);
        erridx = find(e2vals < 51 & [Trials.RespDir] .* [Trials.rwdir] == -1 & [Trials.Trial] > 0);
    end
    xs = unique([Trials.(ctype)]);
    ps = unique([Trials.(ptype)]);

 
    
    for j = 1:length(xs)
        if sigsign < 0
            idx = find(e2vals < mean(e2vals) & e1vals == xs(j));
        else
            idx = find(e2vals > mean(e2vals) & e1vals == xs(j));
        end
     rates(j) = mean([Trials(idx).count]);
     choices(j) = mean([Trials(idx).RespDir]);
     if isfield(Trials,'vs') % hn 12/4/07
        dirs(j) = mean([Trials(idx).vs]);
     elseif isfield(Trials,'sq')
        dirs(j) = mean([Trials(idx).sq]);
     end
     idx = find(e2vals == minob & e1vals == xs(j));
     bestrates(j) = mean([Trials(idx).count]);
     bestcounts{j} = [Trials(idx).count];
     vars(j) = var([Trials(idx).count]);
     bestn(j) = length(idx);
    end
    
   %if rates(1) is highest, pref stim is #1
   %if dirs(1) < dirs(end) means this stim was the negative saccade,
   %which is Positive respdir.  So swap pidx, nidx. same if both signs
   % other way.
   dprime = abs(bestrates(end)-bestrates(1))/sqrt((vars(1) * bestn(1) + vars(end) * bestn(end))/(bestn(1)+bestn(end)));
   [a,pval] = ttest2(bestcounts{end},bestcounts{1});
    if((rates(1) - rates(end)) * (dirs(1) - dirs(end)) < 0)
        idx = pidx;
        pidx = nidx;
        nidx = idx;
    end
    if rates(1) > rates(end)
        prefstim = xs(1);
        nullstim = xs(end);
        prefdir = choices(1)-choices(2);
        prefchoice = 1;
        nullchoice = -1;
    else
        prefstim = xs(end);
        nullstim = xs(1);
        prefdir = choices(2)-choices(1);
        prefchoice = -1;
        nullchoice = 1;
    end
    if sign(prefstim-nullstim) == prefchoice
            fprintf('RespDir Mismatch Pref %d, Null %d But Resp Mean %.2f\n',prefstim,nullstim,prefdir);
    end
    
    k = 1;
    args = {};
    if nresample
           args{k} = 'resample';
           args{k+1} = nresample;
           k = k + 2;
    end
    


    [cp, details] = CalcCP([Trials(pidx).count],[Trials(nidx).count],args{:});
    result(1).cp.cp = cp;
    result(1).cp.prefdir = prefdir;
    result(1).cp.p = details.pval;
    result(1).cp.counts = details.n;
    result(1).cp.dprime = dprime;
    result(1).cp.prefstim = prefstim;
    result(1).cp.nullstim = nullstim;
    result(1).cp.prefchoice = prefchoice;
    result(1).cp.dprimep = pval;
    if ~isnan(details.pval)
        str = sprintf('Pref %.2f CP %.3f p < %.3f, N=',prefstim,cp,details.pval);
    else
        str = sprintf('Pref %.2f CP %.3f, N=',prefstim,cp);
    end
    
        counts = [Trials.count];
        pTrials.sval = [Trials.(ctype)];
        pTrials.mag = [Trials.(ptype)];
        for j = 1:length(ps)
            for k = 1:length(xs)
                id = find([Trials.(ctype)] == xs(k) & [Trials.(ptype)] == ps(j));
                pTrials.zscores(id) = (counts(id)  - mean(counts(id)))./std(counts(id));
                pp(j,k) = sum([Trials(id).RespDir] > 0)/ sum([Trials(id).RespDir] ~= 0);
                np(j,k) = length(id);
                ip{j,k} = id;
            end
        end
        ratio = 0.5 - abs(0.5-pp);
        gcp.id = find(ratio .* np >= npsych);
        tid = [ip{gcp.id}];
        pids = find([Trials(tid).RespDir] == prefchoice);
        nids = find([Trials(tid).RespDir] == nullchoice);
        [gcp.cp, gcp.details] = CalcCP(pTrials.zscores(tid(pids)),pTrials.zscores(tid(nids)),args);
        result(1).gcp = gcp;
    
    
    args = {};
    if getem == 3
        args = {args{:} 'emdiff' em 'emskip' emskip};
    elseif getem
        args = {args{:} 'em' em 'emskip' emskip};
    end
    if holdon
        args = {args{:}, 'holdon'};
    end
    if getcp == 1
        PlotSequence(result,pidx,nidx,'str',str,'correct',goodidx,'wrong',erridx,args{:});
%        PlotSequence(result,pidx,nidx,'str',str,args{:});
    elseif getcp == 3
        PlotSequence(result,pidx,nidx,'str',str,'hist');
    else
        [a,b,c,d] = PlotTimeCourse(result,pidx,nidx,'str',str,'sdfw',sdfw,args{:});
        result(1).cp.psdf = a;
        result(1).cp.nsdf = b;
        if getem
            result(1).cp.em = c;
            if ~isempty(d)
            result(1).cp.sample_rate = d.sample_rate;
            result(1).cp.prefsac = d.prefsac;
            result(1).cp.nullsac = d.nullsac;
            end
        end
    result(1).fig = gcf;
        
    end
end

if ~isempty(result)
if showseq == 2
    PlotSequence(result,find([Expt.Trials.Trial] > 0),[],'showtimes');
elseif showseq == 3
    PlotSequence(result,find([Expt.Trials.Trial] > 0),[],'showid');
elseif showseq
    PlotSequence(result,find([Expt.Trials.Trial] > 0),[]);
end
end
result(1).fig = gcf;

function PlotCPHist(result,fidx, nidx, varargin)


function PlotSequence(result,fidx, nidx, varargin)

showhist = 0;
showtrials = 1;
showtimes = 0;
holdon = 0;
erridx = [];
goodidx = [];
str = ' ';
    j = 1;
    while j < nargin -2
        if strncmpi(varargin{j},'cp',2)
            j = j+1;
            cp = varargin{j};
            j = j+1;
            cpval = vararargin{j};
        elseif strncmpi(varargin{j},'correct',5)
            goodidx = varargin{j+1};
            j = j+1;
         elseif strncmpi(varargin{j},'showtime',8)
            showtimes = 1;
         elseif strncmpi(varargin{j},'showid',6)
            showtimes = 2;
        elseif strncmpi(varargin{j},'hist',3)
            showhist = 1;
        elseif strncmpi(varargin{j},'holdon',3)
            holdon = 1;
        elseif strncmpi(varargin{j},'str',3)
            j = j+1;
            str = varargin{j};
        elseif strncmpi(varargin{j},'wrong',5)
            erridx = varargin{j+1};
            j = j+1;
        end
        j = j+ 1;
    end
Trials = result(1).Data.Trials;
toff = 0;
for j = 1:length(Trials)
    starts(j) = Trials(j).Start(1)+toff;
    if j > 1 && starts(j) < starts(j-1)
        toff = toff + starts(j-1)-starts(j);
        starts(j) = Trials(j).Start(1)+toff;
    end
    ends(j) = Trials(j).End(end)+toff;
end

if isfield(result(1).Data.Header,'BlockStart')
    blocks = result(1).Data.Header.BlockStart;
    for j = 1:length(blocks)
        id = find([Trials.Trial] > blocks(j));
        if length(id)
            if showtimes == 2
                blockt(j) = Trials(id(1)).id;
            elseif showtimes == 1
                blockt(j) = starts(id(1))/10000;
            else
                blockt(j) = Trials(id(1)).Trial;
            end
        else
            blockt(j) = 0;
        end
    end
else
    blocks = [];
    blockt = [];
end
    
if ~holdon
    hold off;
    
end

%pref Choices plotted in blue. Blue lines for block boundaries to
%remeind...
    fcounts = [Trials(fidx).count];
    tstart = min(starts)/10000;
    if isfield(Trials,'vs') & mean([Trials(fidx).vs]) < 0
        prefdir = 'down';
        nulldir = 'up';
    else
        prefdir = 'up';
        nulldir = 'down';
    end
    ncounts = [Trials(nidx).count];
    if showhist
        [y,hx] = hist([fcounts ncounts]);
        hist(fcounts,hx);
        hold on;
        if length(fcounts) > 10
        [y,x] = smhist(fcounts,'smoother',0.1);
        pl(1) = plot(x,y,'b','LineWidth',2);
        else
            pl(1) = 0;
        end
        hold on;
        [y,x] = hist(ncounts,hx);
        h = bar(x,y,1);
        set(h,'FaceColor','none','EdgeColor','r','LineWidth',2);
        if length(ncounts) > 10
        [y,x] = smhist(ncounts,'smoother',0.1);
        pl(2) = plot(x,y,'r','LineWidth',2);
        else
            pl(2) = 0;
        end
        ylabel('N');
        xlabel('Spike Count');
    else
        if showtimes ==1
            x{1} = starts(fidx)/10000;
            x{2} = starts(nidx)/10000;
            x{3} = [Trials(goodidx).Start]./10000;
            x{4} = [Trials(erridx).Start]./10000;
        elseif showtimes == 2
            x{1} = [Trials(fidx).id];
            x{2} = [Trials(nidx).id];
            x{3} = [Trials(goodidx).id];
            x{4} = [Trials(erridx).id];
        else
            x{1} = [Trials(fidx).Trial];
            x{2} = [Trials(nidx).Trial];
            x{3} = [Trials(goodidx).Trial];
            x{4} = [Trials(erridx).Trial];
        end
        allx = cat(2,x{:});
        if showtrials
            if length(fcounts)
                pl(1) = plot(x{1}(1,:),fcounts,'ob');
                hold on;
            end
            if length(ncounts)
                pl(2) = plot(x{2}(1,:),ncounts,'or');
            end
            ylim = get(gca,'ylim');
            if length(goodidx)
                pl(2) = plot(x{3},ones(size(x{3})).*ylim(2),'ok');
            end
            if length(erridx)
                pl(2) = plot(x{4},zeros(size(x{4})),'ok');
            end
            xlim = get(gca,'xlim');
            for j = 1:length(blockt)
                plot([blockt(j) blockt(j)],[0 ylim(2)],':');
            end
            h = text(xlim(1),ylim(2),'pref');
            set(h,'color','b','VerticalAlignment','top');
        else
            pl(1) = plot([Trials(fidx).Start]/10000 - starts(1)/10000,fcounts,'ob');
            hold on;
            pl(2) = plot([Trials(nidx).Start]/10000 - starts(1)/10000,ncounts,'or');
        end
        if isempty(ncounts)
        else
            [a, isort] = sort(ncounts);
            xlim = minmax(allx);
            plot(xlim(1)+[1:length(ncounts)].* diff(xlim)/length(ncounts),ncounts(isort),'r-');
            [a, isort] = sort(fcounts);
            plot(xlim(1)+[1:length(fcounts)].* diff(xlim)/length(fcounts),fcounts(isort),'b-');
        end
    end
    if sum(ishandle(pl)) == 2 & ~ishold %in case one did not plot
        legend(pl,{sprintf('Pref (%s) Choice',prefdir) sprintf('Null (%s) Choice',nulldir)});
    end
    if isfield(result,'title')
        title(sprintf('%s, %s %d,%d',result(1).title,str,length(fcounts),length(ncounts)));    
    else
        title(sprintf('%s, %s %d,%d',splitpath(result(1).name),str,length(fcounts),length(ncounts)));    
    end
    if showtimes == 2
        xlabel(sprintf('Id'));
    elseif showtimes
        xlabel(sprintf('Time (sec) - %d',tstart));
    else
         xlabel(sprintf('Trial'));
    end
    ylabel(sprintf('Spike Count (%.2f sec)',result(1).duration./10000));
    
    
    
    function whichsaccade(a,b,type, id)

    while ~isfigure(a)
        a = get(a,'Parent');
    end
    data = get(a,'UserData');
    
    tid = find([data.Trials.Trial] == data.trialid{type}(id));

    if isfield(data,'sacs')
    s = data.sacs{type}(id);
    fprintf('Sacc at %.3f in trial %d (R%.0f)\n',s.start./10000,data.trialid{type}(id), data.Trials(tid).RespDir);
    end
    GetFigure('OneTrial');
    hold off;
    colors = 'rgbm';
    for j = 1:size(data.Trials(tid).EyeData,2)
    plot(data.times./10,data.Trials(tid).EyeData(:,j)-mean(data.Trials(tid).EyeData(1:100,j)),colors(j));
    hold on;
    end
        
    
function PlotSaccByChoice(Trials, Header, pidx, nidx, em, varargin)
   
plotmode = 0;
j = 1;
while j <= length(varargin)
    if strncmpi(varargin{j},'mean',4)
        plotmode = 1;
    end
    j = j+1;
end

if plotmode == 0
    psacs = [Trials(pidx).Saccades];
    id = find([psacs.start] < 20000);
    [x,y] = pol2cart([psacs(id).dir], [psacs(id).size]);
    hold off;
    hw = range(y)/20;
    for j = 1:length(x)
        plot(x(j),y(j),'o','buttondownfcn',{@whichsaccade, 1, id(j)});
        hold on;
    end
    arrow([0 mean(x)],[0 mean(y)], 20, hw);
    n = 1;
    for j = pidx
        for k = 1:length(Trials(j).Saccades)
            data.trialid{1}(n) = Trials(j).Trial;
            n = n+1;
        end
    end


    nsacs = [Trials(nidx).Saccades];
    id = find([nsacs.start] < 20000);
    [x,y] = pol2cart([nsacs(id).dir], [nsacs(id).size]);
    for j = 1:length(x)
        plot(x(j),y(j),'ro','buttondownfcn',{@whichsaccade,2, id(j)});
    end
    arrow([0 mean(x)],[0 mean(y)], 20, hw,'col','r');
    n = 1;
    for j = nidx
        for k = 1:length(Trials(j).Saccades)
            data.trialid{2}(n) = Trials(j).Trial;
            n = n+1;
        end
    end
    data.sacs{1} = psacs;
    data.sacs{2} = nsacs;
elseif plotmode == 1
    sid = find(Header.emtimes > 1000 & Header.emtimes < 6000);
    eid = find(Header.emtimes > 16000 & Header.emtimes < 21000);
    aid = find(Header.emtimes > 1000 & Header.emtimes < 21000);
    hold off;
    starts = [];
    sizes = [];
    for k = 1:length(pidx)
        j = pidx(k);
        if isempty(Trials(j).Saccades)
            aid = [];
        else
            starts = [starts [Trials(j).Saccades.start]];
            sizes = [sizes [Trials(j).Saccades.size]];
            aid = find([Trials(j).Saccades.start] > em.stattime(1) & [Trials(j).Saccades.start] < em.stattime(2));
        end
        if length(aid)
        [x,y] = pol2cart([Trials(j).Saccades(aid).dir],[Trials(j).Saccades(aid).size]);
        sdv = sum(y);
        else
            sdv = NaN;
        end
        ch = mean(Trials(j).EyeData(:,[1 2])');
        cv = mean(Trials(j).EyeData(:,[3 4])');
        mdv = mean(cv(eid)) - mean(cv(sid));
        plot(mdv,sdv,'o','buttondownfcn',{@whichsaccade,1, k});
        hold on;
    end
    for k = 1:length(nidx)
        j = nidx(k);
        if isempty(Trials(j).Saccades)
            aid = [];
        else
            aid = find([Trials(j).Saccades.start] > em.stattime(1) & [Trials(j).Saccades.start] < em.stattime(2));
        end
        if length(aid);
            [x,y] = pol2cart([Trials(j).Saccades(aid).dir],[Trials(j).Saccades(aid).size]);

            sdv = sum(y);
        else
            sdv = NaN;
        end
        ch = mean(Trials(j).EyeData(:,[1 2])');
        cv = mean(Trials(j).EyeData(:,[3 4])');
        mdv = mean(cv(eid)) - mean(cv(sid));
        plot(mdv,sdv,'ro','buttondownfcn',{@whichsaccade,2, k});
        hold on;
    end
    data.trialid{1} = [Trials(pidx).Trial];
    data.trialid{2} = [Trials(nidx).Trial];
        
end
 data.Trials = Trials;
 data.times = Header.emtimes;
 set(gcf,'UserData',data);
 axis('image');
 


function [fsdf, nsdf, eyepos, details] = PlotTimeCourse(result, fidx, nidx, varargin)


sdfw = 100;
str = ' ';
showem = 0;
eyepos = [];
details = [];
em.maxdrift = 0;
em.stattime = [1500 21000];

     j = 1;
    while j < nargin -2
        if strncmpi(varargin{j},'cp',2)
            j = j+1;
            cp = varargin{j};
            j = j+1;
            cpval = varargin{j};
        elseif strncmpi(varargin{j},'sdfw',4)
            j = j+1;
            sdfw = varargin{j};
        elseif strncmpi(varargin{j},'emskip',3)
            j = j+1;
            emskip = varargin{j};
        elseif strncmpi(varargin{j},'emdiff',4)
            showem = 3;
            if length(varargin)  > j & isstruct(varargin{j+1})
            j = j+1; 
            em = varargin{j};
            end
        elseif strncmpi(varargin{j},'em',2)
            showem = 1;
            if length(varargin)  > j & isstruct(varargin{j+1})
            j = j+1; 
            em = varargin{j};
            end
        elseif strncmpi(varargin{j},'str',3)
            j = j+1;
            str = varargin{j};
        end
        j = j+ 1;
    end
    Trials = result(1).Data.Trials;
    times = -1000:25:result(1).duration+1000;
    fsdf = trigsdf(Trials(fidx),sdfw,times);
    if showem
        subplot(2,1,1);
    else
        subplot(1,1,1);
    end
    hold off;
    nsdf = trigsdf(Trials(nidx),sdfw,times);
    plot(times./10,nsdf,'r');
    hold on;
    plot(times./10,fsdf);
    plot(times./10,fsdf-nsdf,'g');
    lax = gca;
   
    title(sprintf('%s, %s %d,%d',splitpath(result.name),str,length(fidx),length(nidx)));    
    xlabel('Time');
    ylabel('Rate');
    if showem
        subplot(2,1,2);
        hold off;
        for j = 1:length(Trials)
            if isfield(Trials,'Saccades') & ~isempty(Trials(j).Saccades)
            aid = find([Trials(j).Saccades.start] > em.stattime(1) & [Trials(j).Saccades.start] < em.stattime(2));
            else
                aid = [];
            end
            if length(aid)
            [x,y] = pol2cart([Trials(j).Saccades(aid).dir],[Trials(j).Saccades(aid).size]);
            sdv(j) = sum(y) .* -Trials(j).RespDir;
            else
                sdv(j) = NaN;
            end
  %NEGATIVE respdir is associated with upward saccade, so positive sdv
  %means mvmnt in direction of choice
        end

%Respdir -1 means an UPWARD or LEFTWARD saccade
        if mean([Trials(fidx).RespDir]) < mean([Trials(nidx).RespDir])
            upidx = fidx;
            downidx = nidx;
        else
            upidx = nidx;
            downidx = fidx;
        end
        if em.maxdrift > 0 
           upidx = setdiff(upidx, find(sdv >  em.maxdrift));
        downidx = setdiff(downidx, find(sdv > em.maxdrift));
        end
        if showem == 3
            ctype = 'choicediff';
        else
            ctype = 'choice';
        end
        [eyepos, details] = PlotExptEM(result(1).Data,ctype,upidx,downidx,'duration',result(1).duration,'emskip',emskip);
        sample_rate = 1/(10 * result(1).Data.Header.CRsamplerate);
        times = details.times;
        tidx = find(times < result(1).duration/10);
        plot(times(tidx),eyepos(tidx,2),'b');
        hold on;
        plot(times(tidx),eyepos(tidx,1),'r');
        details.sample_rate = sample_rate;
        legend('V','H');
        title(sprintf('N= %d,%d',length(upidx),length(downidx)));
        %axes(lax);
        ylabel('Degrees');
    end
    if showem
    GetFigure('Saccades');
    subplot(1,1,1);
    PlotSaccByChoice(Trials, result(1).Data.Header, upidx, downidx, em, 'mean');
    end


function args = CheckExpt(Expt,args)

stimtype = GetEval(Expt,'st','mode');
if isnumeric(Expt.Stimvals.et)
    return;
end
 if stimtype == 2 | stimtype == 15  %% RDS or RLS
     if isfield(Expt.Trials,'ce')
     ces = [Expt.Trials.ce];
     if sum(ces == 0) < length(ces)/2
     args = {args{:} 'Uncorr'};
     end
     end
 end
 if stimtype == 17  & Expt.Stimvals.ve < 4.13 & strmatch(Expt.Stimvals.et,{'dp' 'Pd' 'dx' 'dO'})
     args = {args{:} 'Uncorr'};
 end     
 if stimtype == 18 & strmatch(Expt.Stimvals.et,{'dp' 'Pd' 'dx' 'dO'})
     args = {args{:} 'Uncorr' 'AddMonoc'};
 end
     
 if strmatch(Expt.Stimvals.et,'sf')
     args = {args{:} 'LogX'};
 end
 if strmatch(Expt.Stimvals.et,{'dp', 'dO','c1','c0','rf','lf'},'exact')
     args = {args{:} 'AddMonoc'};
 elseif isfield(Expt.Trials,'me') & Expt.Header.rc == 0
         ln = sum([Expt.Trials.me] == -1);
         rn = sum([Expt.Trials.me] == 1);
         bn = sum([Expt.Trials.me] == 0);
         if bn > 0 &  ln > 0 & ln < length(Expt.Trials)/4 | ...
                 rn > 0 & rn < length(Expt.Trials)/4 
         args = {args{:} 'AddMonoc'};
         end
 end

  if strmatch(Expt.Stimvals.et,{'c1','c0','rf','lf'},'exact')
     args = {args{:} 'LogX'};
  end
 
  

