function [dp, fits, details] = Fit2Gauss(C, r, DATA, varargin)%[dp, fits, details] = AllV.Fit2Gauss(C, r, DATA, varargin)%negative values of dp are good separation    plottype = 0;    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'plothist',6)            plottype = varargin{j};        end        j = j+1;    end    fx = linspace(min(r),max(r),200);    if isfield(C,'clst')        id = find(C.clst == DATA.currentcluster+1);        nid = find(C.clst ~= DATA.currentcluster+1 & C.clst > 0);    else    id = find(DATA.clst == DATA.currentcluster+1);    nid = find(DATA.clst ==1);    end    if C.shape(1) == 0 || DATA.currentcluster > 1        r = AllV.Rprime(r);        fx = linspace(min(r),max(r),200);        [y,x] = hist(r,fx);        [a,b] = min(abs(fx-1));    elseif isfield(C,'crit')        [a,b] = min(abs(fx-C.crit));        [y,x] = hist(r,fx);    else        [a,b] = min(abs(fx-mean(fx))); %temporary        [y,x] = hist(r,fx);    end    details.dx = mean(diff(fx));   details.x = x;    details.y = y;    details.nbins = 200;    crit = x(b);    dp = abs((mean(y(1:b)) - x(b))./std(y(1:b)));    guess = [mean(y(1:b)) std(y(1:b)) prctile(y(1:b),95)];    if length(id) <= 1 || length(nid) <= 1        dp = NaN;        fits{1}.params = [NaN NaN NaN];        fits{1}.mean = NaN;        fits{1}.sd = NaN;        fits{2}.params = [NaN NaN NaN];        fits{2}.mean = NaN;        fits{2}.sd = NaN;        details.fitpos = [0 0];        details.dprime = 0;        details.xrange = [1 1 details.nbins];        details.minxpt = NaN;        return;    end    details.dprime = -abs(mean(r(id))-mean(r(nid)))./sqrt(var(r(id))+var(r(nid)));% If RHS of distribution is very bimodeal, just fit to the first peak    lasti = length(y);    firsti = 1;    if isfield(C,'sign') && C.sign > 0        [peak, peaki] = max(y(1:b));        if peaki > 1            hid = find(y(1:b) > peak/6);            lid = find(y(1:hid(end)) < peak/20);            if ~isempty(lid) && lid(end) > 5                firsti = lid(end);            end        end    else        [peak, peaki] = max(y(b:end));        if b+peaki < lasti            hid = find(y(b+peaki:end) > peak/6); %don't really need this.            lid = find(y(b+peaki:end) < peak/20);            if ~isempty(lid) && lid(1) > 5                lasti = b+peaki+lid(1);            end        end    end    details.xrange = [firsti b lasti];    fits{1} = FitGauss(x(firsti:b),y(firsti:b),'meanlimit',[x(firsti) x(b)]);    fits{2} = FitGauss(x(b:lasti),y(b:lasti),'meanlimit',[x(b) x(lasti)]);     if isfield(fits{1},'params') && isfield(fits{2},'params')         details.fitpos = [fits{1}.params(1) < fx(b) fits{2}.params(1) > fx(b)];%dont need abs fit 1 ix for x < b, fit 2 is x > b. If mean 1 > mean 2, dprime is bad                  dp = (fits{1}.params(1)-fits{2}.params(1))./sqrt((fits{1}.params(2).^2+fits{2}.params(2).^2)/2);         if sum(details.fitpos) < 2  %one mean is wrong side of criterion. Must be bad             dp = abs(dp);         end         details.diff = abs((fits{1}.params(1)-fits{2}.params(1)));         details.sd = sqrt((fits{1}.params(2).^2+fits{2}.params(2).^2)/2);         fya = FitGauss(fx, fits{1}.params, 'eval');         fyb = FitGauss(fx, fits{2}.params, 'eval');         fy = fya+fyb;         id = find(fx > fits{1}.mean & fx < fits{2}.mean);         if ~isempty(id)             [a,b] = min(fy(id));             details.minxpt = fx(id(b));         else             details.minxpt = NaN;         end         if strcmp(plottype,'plothist')             GetFigure('FitGauss');             hold off;             bar(x,y);             hold on;             bar(x(1:b),y(1:b),'r')             plot(fx,fya,'r-','linewidth',2);             plot(fx,fyb,'b-','linewidth',2);             set(gca,'ylim',[0 max(y)]);             title(sprintf('Dprime from fits %.2f',dp));         end     else         if isempty(fits{1})             fits{1}.params = [NaN NaN NaN];             fits{1}.mean = NaN;             fits{1}.sd = NaN;         end         if isempty(fits{2})             fits{2}.params = [NaN NaN NaN];             fits{2}.mean = NaN;             fits{2}.sd = NaN;         end         dp = NaN;         details.fitpos = [0 0];         details.diff = NaN;         details.sd = NaN;         details.minxpt = NaN;     end     details.fits = fits;     