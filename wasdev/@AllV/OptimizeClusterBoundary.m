function [C, details] = OptimizeClusterBoundary(DATA)        details = [];        if DATA.currentcluster > 1        preC = DATA.cluster.next{DATA.currentcluster-1};    else        preC = DATA.cluster;    end            if preC.shape == 0        [C,details]  = AllV.OptimizeEllipse(DATA);        C.crit = 1;        C.sign = 0;        return;    end    if preC.shape == 1 || preC.shape == 2        [C, details]  = AllV.OptimizeLine(DATA);        C.sign = AllV.CheckSign(C,details.r,DATA.energy);        return;    end    usegm = 1;        space = preC.space;    if space(1) == 5        C = AllV.OptimizeVarE(DATA);        return;    elseif space(1) == 6  %% cut in > 2 dimensions.        if DATA.currentcluster == 1 %should always be tru            x = DATA.ndxy(:,1);            y = DATA.ndxy(:,2);        else            x = DATA.xy{DATA.currentcluster}(:,1);            y = DATA.xy{DATA.currentcluster}(:,2);        end    else    xi = space(2);    yi = space(3);    end    if space(1) == 1        x = DATA.pcs(:,xi);        y = DATA.pcs(:,yi);    elseif space(1) == 2        xi = space(3);        yi = space(5);        AllVoltages = AllV.mygetappdata(DATA,'AllVoltages');        x = squeeze(AllVoltages(space(2),xi,:));        y = squeeze(AllVoltages(space(4),yi,:));    elseif space(1) == 3        x = DATA.TemplateScores(:,xi);        y = DATA.TemplateScores(:,yi);    end    C.y = minmax(y);        if usegm        xy = cat(2,x,y);        [a,b,c] = AllV.BestAngleGM(xy, [],[]);        C.angle = a;        C.crit = c.crit;        C.sign = AllV.CheckSign(C,c.xy(:,1),DATA.energy);        return;    end    a = -pi/2:pi/36:pi/2; % use this range because this is what atan returns;        for j = 1:length(a)        xy = xyrotate(x,y,a(j));        dip(j) = HartigansDipTest(sort(xy(:,1)));        [aa,bb] = AllV.oldFindDip(xy(:,1),DATA.energy(1,:));        mydip(j) = bb.dipsize(1);        coeff(j) = AllV.BimodalCoeff(xy(:,1),1.5);    end    if space(1) == 2        [dipval,b] = max(dip);        dipval = coeff(b);    else        [dipval,b] = max(coeff);    end    C.angle = a(b);    xy = xyrotate(x,y,C.angle);        [crit,b] = AllV.oldFindDip(xy(:,1),DATA.energy(1,:),'plot',DATA.tag.dips,'gmix');    C.crit = crit(1);    C.crit = mean(crit([5 6])); %based on GM fit    C.sign = b.sign;    AllV.SetFigure(DATA.tag.dips, DATA)    hold off;    plot(a,dip./max(dip));    hold on;    plot(a,mydip./max(mydip),'r');    plot(a,coeff./max(coeff),'g');                    