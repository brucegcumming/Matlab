function PCCluster(a,b, fcn)[DATA, F] = GetDataFromFig(a);DataClusters = AllV.mygetappdata(DATA,'Clusters');onoff = {'off' 'on'};plotpcs = 0;finish = 0;if strcmp(fcn,'all6cells')    b = AllV.CalcDistanceMatrices(DATA,6);    uid = DATA.uid;    for j = 1:11        objs{j} = gmdistribution.fit(DATA.pcs(uid,DATA.pcspace),6,'Options',statset('MaxIter',1000));        [a,d] = AllV.gmdprime(objs{j});        [D, scores] = squishDistanceMatrix(d.d);        bestd(j) = scores(2);        fprintf('Fit %d D = %.2f\n',j,scores(2));    end    [a,c] = sort(bestd);    besti = c(6);%    [a, besti] = min(bestd);    DATA.gmcid = AllV.AssignCluster(DATA, objs{besti});    [a,D] = AllV.gmdprime(objs{besti});    b.D(:,:,1) = D.d;    [nspk, a] = Counts(DATA.gmcid);    DATA.usegmcid = 1;    GetFigure('DistanceMatrix');    [E,V] = eig(squeeze(b.D(:,:,1)));    [c,d] = sort(E(:,1));    D = MatrixPermute(b.D(:,:,1),d);    [D, scores, dlist] = squishDistanceMatrix(squeeze(D(:,:,1)));    imagesc(D);    title(sprintf('Score %.2f %.2f',scores(1),scores(2)));    caxis([0 5]);    for j = 1:6        text(j,1,num2str(nspk(dlist(j))));    end    AllV.ReplotPCs(DATA,[]);    set(DATA.toplevel,'UserData',DATA);    return;endif ~ismember(fcn,[4 7])  %if intereactive, look at plots when change cuts    DATA.watchplots = 1;    DATA.watcharg = {'front'};    DATA.interactive = 1;endclassargs = {};if fcn == 1    if isempty(a)        return;    elseif isstruct(a) && ~isempty(b)        E = b;         if E.boundarytype == 2            E.LineA = AllV.BoundaryFromCluster([],DATA.cluster, DATA.currentcluster);        end    else        DATA.clustermode = 0;        DATA = AllV.SetEllipseDrawing(DATA, 0); %called from gui        return;    end    DATA.usegmcid = 0;    classargs = {classargs{:} DATA.quickcutmode};%    plotpcs = 1;elseif strncmp(fcn,'Clear2',5)    c = sscanf(fcn(6:end),'%d');    if isfield(DATA.cluster,'next')        DATA.cluster.next{c-1} = [];    end    DATA.clst(DATA.clst ==c+1) = 1;    DATA.currentcluster = 1;    DATA = AllV.ReplotPCs(DATA,[]);    set(DATA.toplevel,'UserData',DATA);    return;elseif strncmp(fcn,'Clear2',5)    c = sscanf(fcn(6:end),'%d');    if isfield(DATA.cluster,'next')        DATA.cluster.next{c} = [];    end    DATA.clst(DATA.clst ==c+1) = 1;    DATA.currentcluster = 1;    DATA = AllV.ReplotPCs(DATA,[]);    set(DATA.toplevel,'UserData',DATA);    return;elseif strncmp(fcn,'plotcelllist',5)elseif strncmp(fcn,'iteratefit',9)    AllV.IterateFit(DATA, 1);    DATA = get(DATA.toplevel,'UserData');    finish = 1;elseif strncmp(fcn,'markbadexpt',11)    SetClusters(AllV.ClusterFile(DATA.name,DATA.Expt),'badexpt');    DATA.ArrayConfig = GetArrayConfig(DATA.datadir,'badexpt',DATA.exptno);    return;elseif strncmp(fcn,'mark',4)    DATA.cluster.marked = find(strcmp(fcn,{'marknone' 'markgood' 'markbadprobe' 'markmugood' 'markduplicateprobe'}));    label{3} = 'Bad';    label{5} = 'Duplicate';    if ismember(DATA.cluster.marked,[3 5]) %Bad or duplicate Probe        yn = questdlg(sprintf('Save %s probe to ArrayConfig?',label{DATA.cluster.marked}),'Marking Probe for all expts','Yes','No','Yes');        if strcmp(yn,'Yes')           DATA.ArrayConfig = GetArrayConfig(DATA.datadir,fcn,AllV.ProbeNumber(DATA));        end    end    finish = 1;elseif strncmp(fcn,'savedef',7)    outname = AllV.ClusterFile(DATA.name,DATA.Expt,'subdir',DATA.clustersubdir);    if DATA.auto.saveref        AllV.SaveClusters(DATA, outname,'quick');    end    outname = regexprep(outname,'Expt[0-9]*ClusterTimes','RefClusters');    AllV.SaveClusters(DATA, outname,'quick');    if DATA.auto.advanceprobe        AllV.ChangeProbe(DATA,[],'next');        return;    end    finish = 1;elseif strncmp(fcn,'plotother',7)    if strcmp(DATA.cluster.automode,'james')        DATA.plottype = 13;    else        DATA.plottype = 9;    end    AllV.ReplotPCs(DATA,[]);    return;elseif strncmp(fcn,'dvdtpc',6)    DATA.dvdt = ~DATA.dvdt;    set(a,'Checked',onoff{1+DATA.dvdt});    DATA = AllV.SetPCs(DATA, 1,0);    AllV.ReplotPCs(DATA,[]);elseif strncmp(fcn,'plotica',7)    DATA.plottype = 10;    if 1 || ~isfield(DATA,'icas')        DATA = AllV.CalcICA(DATA,5);    end    set(DATA.toplevel,'UserData',DATA);    AllV.ReplotPCs(DATA,[]);    return;elseif strcmp(fcn,'quantifyquick')    AllV.QuantifyQuickClusters(DATA,[1:DATA.nprobes],'savespikes');    return;elseif strncmp(fcn,'Ellipse',7)    DATA.usegmcid = 0;    if isstruct(a)        E = b;    else        c = sscanf(fcn(8:end),'%d');        if c == 0 %use line for cluster 1            c = 1;            clustertype = 1;        else            clustertype = 0;        end        if c ~= DATA.currentcluster && DATA.auto.replotcluster            replot = 1;        else            replot = 0;        end        DATA = AllV.SetEllipseDrawing(DATA, clustertype,'cluster',c); %called from gui%        DATA.clustericon = AllV.SetClusterIcon(DATA);        if replot            AllV.TemplatePlot(DATA,'recalc');            DATA = get(DATA.toplevel,'UserData');            AllV.ReplotPCs(DATA,[], 'autospace');        end        set(DATA.toplevel,'UserData',DATA);        return;    end    manualcut = 1;    plotpcs = 1;elseif strncmp(fcn,'flipsign',7)    [cl, cluster] = AllV.ClassifySpikes(DATA,DATA.cluster,'sign',DATA.cluster.sign*-1,'quick', 1);    DATA.cluster = rmfield(cluster,'r');    DATA.clid = cl.id;    DATA.nid = cl.nid;    DATA.clst = cl.clst;    DATA.cluster.ctime = now;    DATA = AllV.ReplotPCs(DATA,[]);    AllV.PlotHistogram(DATA,[]);    set(DATA.toplevel,'UserData',DATA);    return;elseif fcn == 2    it = AllV.SetFigure(DATA.tag.vare,DATA, DATA.watcharg{:});    DATA = AllV.SetEllipseDrawing(DATA, 0,'cluster',1,'figure',DATA.tag.vare); %called from gui    return;    elseif fcn == 3 %replot    AllV.PlotMeanSpike(DATA);    DATA = AllV.ReplotPCs(DATA,[]);    Q = DATA.quickcutmode;     Q.quick = 1;    AllV.PlotTriggerHist(DATA,DATA.cluster,'showall',Q);    set(DATA.toplevel,'UserData',DATA);    return;elseif fcn == 4 %toggle density plot    DATA.clplot = ~DATA.clplot;    if isstruct(a)        it = findobj(DATA.toplevel,'tag','Density');        set(it,'Checked',onoff{DATA.clplot+1});    else        set(a,'Checked',onoff{DATA.clplot+1});    end    AllV.ReplotPCs(DATA,[]);    set(DATA.toplevel,'UserData',DATA);    return;elseif ismember(fcn, [5 32])    if fcn == 5        AllV.TemplatePlot(DATA,'recalc');    else        AllV.TemplatePlot(DATA,'stdtemplate','nodip');    end    DATA = get(DATA.toplevel,'UserData');    DATA.plottype = 3;%    DATA = AllV.ReplotPCs(DATA,[]); %done in templateplot    set(DATA.toplevel,'UserData',DATA);    return;elseif fcn == 7    it = AllV.SetFigure(DATA.tag.vare,DATA, DATA.watcharg{:});    E = AddEllipse(it,'wait','color','r','line');    E.space = 5;    E.pcplot = [];    DATA.cboundary = AllV.PlotHistogram(DATA,E);elseif fcn == 8    DATA = AllV.SetEllipseDrawing(DATA, 1,'cluster',1); %called from gui    return;elseif fcn == 11    DATA = AllV.SetEllipseDrawing(DATA, 1,'cluster',1,'boundarytype',2); %called from gui                return;elseif ismember(fcn, [8 11])    DATA.watchplots = 1;    it = AllV.SetFigure(DATA.tag.top,DATA,DATA.watcharg{:});    E = AddEllipse(it,'wait','color','r','line');    if isempty(E)        return;    end    E.cluster = DATA.currentcluster;    E.pcplot = get(gca,'UserData');    classargs = {classargs{:} DATA.quickcutmode};    plotpcs = 1;elseif fcn == 9    DATA.plottype = 1;    set(DATA.toplevel,'UserData',DATA);    DATA = AllV.ReplotPCs(DATA,[]);    return;elseif fcn == 10    DATA.plottype = 2;    set(DATA.toplevel,'UserData',DATA);    AllV.PlotOneXY(DATA,DATA.xyplot.xy,'default');    DATA = AllV.ReplotPCs(DATA,[]);    return;elseif ismember(fcn,[12 25])    oldname = get(DATA.toplevel,'name');    outname = AllV.ClusterFile(DATA.name,DATA.Expt,'subdir',DATA.clustersubdir);    if fcn == 25 %force save Spikes        DATA.savespikes = 2;    end    stime = now;    args = {};    if fcn == 12         args = {args{:} 'quick'};    end        [DATA, id] = AllV.SaveClusters(DATA,outname,args{:});    if fcn == 25 || DATA.quicksave.QuickSpikes %save Spikes         AllV.SaveSpikes(DATA,id,AllV.SpkFileName(DATA));    end        fprintf('Save took %.2f\n',mytoc(stime));    if DATA.profiling > 1%        profile viewer;    end    set(DATA.toplevel,'UserData', DATA);    if DATA.auto.advanceprobe        AllV.ChangeProbe(DATA,[],'next');    elseif DATA.auto.advanceexpt        AllV.AllVPcs(DATA.toplevel, 'newexpt', DATA.exptno+1, DATA.probeswitchmode);    end    figure(DATA.toplevel);    if isfigure(DATA.errpopup)        figure(DATA.errpopup);    end    return;elseif fcn == 13    if ~isfield(DATA,'Vall') %can't do this from Gui        return;    end    if DATA.plottype > 2        DATA.plottype = 1;        set(DATA.toplevel,'UserData',DATA);    end    name = get(DATA.toplevel,'Name');    set(DATA.toplevel,'Name',sprintf('Triggering on Probe %d',DATA.probe(1)));    drawnow;    AllV.AllVPcs(DATA.toplevel,'tchan',DATA.probe(1)+1,DATA.args{3:end});    set(DATA.toplevel,'Name',name);    return;elseif fcn == 14    DATA.plottype = 3;    set(DATA.toplevel,'UserData',DATA);    if isfield(DATA,'TemplateScores') && sum(DATA.TemplateScores(:,12)) > 0%        DATA = AllV.ReplotPCs(DATA,AllV.BoundaryFromCluster([],DATA.cluster, DATA.currentcluster));        DATA = AllV.ReplotPCs(DATA,[]);        AllV.SetFigure(DATA.tag.tmplscore, DATA);        subplot(1,1,1);        hold off;        plot(DATA.TemplateScores(:,2)./DATA.spkvar(DATA.probe(1),:)',DATA.TemplateScores(:,2),'.');%        plot(DATA.spkvar(DATA.probe(1),:),DATA.TemplateScores(:,2),'.');    else    AllV.TemplatePlot(DATA);    end    return;elseif fcn == 15    DATA.plottype = 4;    set(DATA.toplevel,'UserData',DATA);    DATA = AllV.ReplotPCs(DATA,[]);    return;elseif fcn == 17    DataClusters{DATA.probe(1)} = [];    DATA = AllV.mysetappdata(DATA,'Clusters',DataClusters);    return;elseif fcn == 18  %optimnize boundary line in current plot    set(DATA.toplevel,'Name','Optimizing');    drawnow;    [DATA, E] = AllV.OptimizeBoundary(DATA);    DATA.cluster.ctime = now;    AllV.PlotHistogram(DATA,E);    set(DATA.toplevel,'Name',get(DATA.toplevel,'Tag'));    set(DATA.toplevel,'UserData',DATA);    return;elseif fcn == 19  %make Automatic cut    set(DATA.toplevel,'Name','Thinking');    drawnow;    DATA.watchplots = 1;     if strcmp(DATA.autocutmode,'mahal')    [E, scores, dips, xy, details] = AllV.AutoCut(DATA,'refine');    DATA.cluster.space = [7 1 1];    DATA.clst = details.spike_clusts;    if details.newDATA        DATA = get(DATA.toplevel,'UserData');    end    if E.angle ~= 0        DATA.xy{1} = xyrotate(xy(:,1),xy(:,2),E.angle);    end    DATA.ndxy = xy;%If template scores have been calculated, keep them    if ~isempty(scores)        DATA.TemplateScores = scores;        DATA.tmpdips = dips;    end    set(DATA.toplevel,'Name',get(DATA.toplevel,'Tag'));    DATA.plottype = E.plottype;    DATA.cboundary = E;    AllV.PlotHistogram(DATA,E);    else        [DATA, details] = AllV.JamesAutoCut(DATA,'retrigger');        AllV.QuickSpks(DATA,1000);        AllV.PlotHistogram(DATA,[]);        DATA.plottype = 13;        DATA = AllV.ReplotPCs(DATA,[]);        finish = 1;    endelseif fcn == 20    if DATA.plottype ~= 8        DATA.plottype = 8;        set(a,'checked','on');    else        DATA.plottype = 1;        set(a,'checked','off');    end    set(DATA.toplevel,'UserData',DATA);    DATA = AllV.ReplotPCs(DATA,[]);    return;elseif fcn == 21    if isfield(DATA,'Clusters') && length(DataClusters) >= DATA.probe(1) && ~isempty(DataClusters{DATA.probe(1)})        DATA.cluster = DataClusters{DATA.probe(1)};        DATA = AllV.CheckTemplates(DATA,DATA.cluster);        if DATA.cluster.space(1) == 6                   [DATA.ndxy, DATA.gmcid] = AllV.ProjectND(DATA, DATA.cluster.space(2), DATA.cluster.gmfit);                   DATA.cluster.bestcl = DATA.gmcid;        end        DATA.watchplots = 1;  %must be in gui        [cl, cluster] = AllV.ClassifySpikes(DATA,DATA.cluster);        DATA.cluster.MeanSpike = cl.MeanSpike;        DATA.clid = cl.id;        DATA.clst = cl.clst;        DATA.cluster.ctime = cluster.ctime;        AllV.PlotHistogram(DATA,[]);    end    set(DATA.toplevel,'UserData',DATA);    return;elseif fcn == 22 %evaluate Gaussian means fit in the cluster space    a = AllV.FitGaussMeans(DATA.xy{1},2,'verbose');    DataClusters{DATA.probe(1)}.mahal = [a.mahal a.dprime];    AllV.SetFigure(DATA.tag.hist, DATA);    subplot(2,1,2);    hold on;    ezcontour(@(x,y)pdf(a.obj,[x y]),get(gca,'xlim'),get(gca,'ylim'));    set(DATA.toplevel,'UserData',DATA);    DATA = AllV.mysetappdata(DATA,'Clusters',DataClusters);    return;elseif sum(strcmp(fcn, {'2cells' '3cells' '4cells' 'PCtwo' 'PCthree' 'PC4'})) | ...        ismember(fcn,[23 26 27 31]) %Check spacee out with guassian mixture model.    usegm = 0;    ntest = 1; % set high to test that minima are reliably found     nc = find(strcmp(fcn, {'2cells' '3cells' '4cells'}));    if usegm        [E, scores, dips, DATA.ndxy] = AllV.AutoCut(DATA, 'usegm');        if E.angle ~= 0            DATA.xy{1} = xyrotate(DATA.ndxy(:,1),DATA.ndxy(:,2),E.angle);        end    else        if nc            [d, obj, xy, details] = AllV.BestSpace(DATA, 'ncells',nc+2);        elseif strcmp(fcn,'PCtwo')            [d, obj, xy, details] = AllV.BestSpace(DATA, 'pconly','ncells',3);            E.bestspace = [1 d];            E.bestd = [d 0 0 0];        elseif strcmp(fcn,'PCthree')            [d, obj, xy, details] = AllV.BestSpace(DATA, 'pconly','ncells',4);            E.bestspace = [1 d];            E.bestd = [d 0 0 0];        elseif strcmp(fcn,'PC4')            [d, obj, xy, details] = AllV.BestSpace(DATA, 'pconly','ncells',5);            E.bestspace = [1 d];            E.bestd = [d 0 0 0];        elseif fcn == 26            for j = 1:ntest            [d, obj, xy, details] = AllV.BestSpace(DATA,'newtemplate');            ds(j) = max(d);            if j > 1                [a,b] = max(d);                fprintf('%d:%.2f(%d)\n',j,max(d),b)            end            end            DATA = get(DATA.toplevel,'UserData');        elseif fcn == 27            [d, obj, xy, details] = AllV.BestSpace(DATA, 'ncells',3);        elseif fcn == 31            [d, obj, xy, details] = AllV.BestSpace(DATA, 'pconly');            E.bestspace = [1 d];            E.bestd = [d 0 0 0];        else            [d, obj, xy, details] = AllV.BestSpace(DATA);        end    if ~isfield(DATA,'TemplateScores')        DATA = get(DATA.toplevel,'UserData');    end    DATA.usegmcid = 1;  %plot results according to GM clustering    DATA.xy{1} = xy;    DATA.ndxy = xy;    E.bestcl = details.cid;    E.gmfit = obj;    [a,b] = max(d);    if b == 4        [c,d]= max(d(1:3));        fprintf('GM %.2f for space %d (%.2f for %d)dt%d csd%d\n',a,b,c,d,DATA.dvdt,DATA.csd);    else        fprintf('GM %.2f for space %d dt%d csd%d\n',a,b,DATA.dvdt,DATA.csd);    end%    [dip, details] = FindDip(DATA.xy{1}(:,1),DATA.energy(1,:),'gmix');    [dip, details] = GMDip(DATA.xy{1},DATA.energy(1,:),'gmix','label',DATA.idstr);    E.space = [6 b];    E.pcplot = [2 8 10 11 12];    crit = dip(1);    E.xyr = [dip(1) 0];    E.shape = 2;    E.sign = details.sign;    E.pos = [crit min(DATA.xy{1}(:,2)) crit max(DATA.xy{1}(:,2))];            end    E.manual = 0;    DATA.cluster.manual = 0;    DATA.gmcid = E.bestcl;    DATA.cboundary = E;    DATA.currentcluster = 1;    [cl, cluster] = AllV.ClassifySpikes(DATA,E);    if fcn == 31%        [P, d, a] = AllV.GMfit(DATA.pcs(DATA.uid,DATA.pcspace),2,1,'idlist',cl.clst);    end    E.mahal = cluster.mahal;    AllV.PlotHistogram(DATA,E,'plotgm');    DATA.clid = cl.id;    DATA.nid = cl.nid;    DATA.clst = cl.clst;    if fcn == 27        DATA.clst = E.bestcl+1;    end    cluster.MeanSpike = cl.MeanSpike;    DATA.cluster = cluster;    DATA.cluster.gmfit = obj;    DATA.MeanSpike = cl.MeanSpike;    if DATA.gmtypes(b)        DATA.plottype = DATA.gmtypes(b);        DATA = AllV.ReplotPCs(DATA,E);    elseif DATA.plot.vare        AllV.SetFigure(DATA.tag.vare, DATA,DATA.watcharg{:});        subplot(1,1,1);        AllV.PlotVarE(DATA);        hold on;        ezcontour(@(x,y)pdf(obj,[x y]),get(gca,'xlim'),get(gca,'ylim'));    end    set(DATA.toplevel,'UserData',DATA);    return;elseif fcn == 24    AllV.SetFigure('Cluster', DATA,DATA.watcharg{:});    xy = xyrotate(DATA.xy{1}(:,1),DATA.xy{1}(:,2),-DATA.cluster.angle);    hold off;    x = mean(xy);    if DATA.plotspk.muscale < 1    a = prctile(abs(DATA.xy{1}(:,1) - DATA.cluster.crit),2);    id = find(abs(DATA.xy{1}(:,1) - DATA.cluster.crit) < a);    r = rand(size(id)).*a;    xid = find(abs(DATA.xy{1}(id,1) - DATA.cluster.crit) > r);    xid = id(xid);    nid = setdiff(DATA.nid,xid);    clid = setdiff(DATA.clid,xid);    else        nid = DATA.nid;        clid = DATA.clid;    end    ms = 5;    plot(xy(nid,1),xy(nid,2),'.','markersize',ms,'color',[0.0 0.0 0.0]);    hold on;    plot(xy(clid,1),xy(clid,2),'r.','markersize',ms);%   plot(xy(xid,1),xy(xid,2),'g.','markersize',ms);    return;elseif fcn == 26    AllV.PlotHistogram(DATA, DATA.cboundary,'plotgm');    return;elseif fcn == 28 %K means    DATA.gmcid = kmeans(DATA.pcs(:,1:4),2,'Distance','correlation');elseif fcn == 29 %Use ND classification    DATA.usegmcid = ~DATA.usegmcid;    set(a,'Checked',onoff{DATA.usegmcid+1});elseif strcmp(fcn, 'PCmultiple')    for j = 1:3        [d, obj, xy, details] = AllV.BestSpace(DATA, 'pconly','ncells',j+1);        ll(j) = obj.NlogL;        E.bestspace = [1 d];        E.bestd = [d 0 0 0];        [d, dd] = AllV.gmdprime(obj);        distance(j,1) = min(dd.d(dd.d > 0));    end    DATA.xy{1} = xy;    [d, dd] = AllV.gmdprime(obj);    E.bestcl = details.cid;    DATA.clst = details.cid;    E.gmfit = obj;    [dip, details] = GMDip(DATA.xy{1},DATA.energy(1,:),'gmix','label',DATA.idstr);    E.space = [6 1];    E.pcplot = [2 8 10 11 12];    crit = dip(1);    E.xyr = [dip(1) 0];    E.shape = 2;    E.sign = details.sign;    E.pos = [crit min(DATA.xy{1}(:,2)) crit max(DATA.xy{1}(:,2))];    GetFigure(DATA.tag.dips);    hold off;    mysubplot(1,4,1:3);    imagesc(dd.d);    mysubplot(1,4,4);    plot(ll,1+[1:length(ll)],'o-');    DATA.plottype = 1;    AllV.ReplotPCs(DATA,E);    set(DATA.toplevel,'UserData',DATA);    return;elseif strcmp(fcn, 'NCellTemplate')    DATA = AllV.TemplateGMFits(DATA);    AllV.ReplotPCs(DATA,[]);    return;elseif strcmp(fcn, 'NDTemplate') || strcmp(fcn, 'NDStdTemplate') %Classify in template space    if strcmp(fcn,'NDStdTemplate') && (DATA.usestdtemplates == 0 || ~isfield(DATA,'TemplateScores'))        AllV.TemplatePlot(DATA,'stdtemplate','nodip');        DATA = get(DATA.toplevel,'UserData');    end        [a,b, DATA.xy{1}, details] = AllV.TemplateSpace(DATA,'template','recalc');        if details.space(1) == 6            DATA.ndxy = DATA.xy{1};        end        DATA.cluster.gmfit = b;        DATA.cluster.gmdprime = details.gmdprime;        DATA.cluster.sign = details.cluster.sign;        DATA.cluster.crit = details.cluster.crit;        if DATA.usestdtemplates            fprintf('Template GM %.2f 4D %.2f 2d, %.2f1D\n',a(1),a(2),details.gmdprime)        else            fprintf('Template GM %.2f 6D %.2f 2d, %.2f1D\n',a(1),a(2),details.gmdprime)        end        DATA.cluster.space = details.space;        if details.space(1) == 6            DATA.plottype = details.space(2);            DATA.cluster.shape = 2;        else            DATA.plottype = details.space(1);            DATA.cluster.shape = 1;        end        DATA.cluster.angle = 0;        DATA.cluster.templatesrc = DATA.cluster.probe;        DATA.cluster.bestcl = details.bestcl;        DATA.cluster.usegmcluster = details.usegmcluster;elseif fcn == 33    if DATA.hidecluster == 0        DATA = AllV.NextPCs(DATA);        set(a,'label','Use All Spikes')    else        DATA = AllV.UseAllEvents(DATA);        set(a,'label','PCs Without Cell')        AllV.ReplotPCs(DATA,[]);    end    set(DATA.toplevel,'UserData',DATA);    return;elseif fcn == 34    ts = now;    DATA.recluster = 0;    AllV.ClassifyAll(DATA,0);    mytoc(ts);    return;else    for j = 1:size(DATA.pcplots,1);        yl = prctile(DATA.pcs(:,DATA.pcplots(j,2)),[100-fcn fcn]);        xl = prctile(DATA.pcs(:,DATA.pcplots(j,1)),[100-fcn fcn]);        AllV.SetFigure(DATA.tag.top,DATA);        subplot(2,4,j);        set(gca,'xlim',xl,'ylim',yl);    end    return;endif finish    set(DATA.toplevel,'UserData',DATA);    figure(DATA.toplevel);    return;endDATA.recluster = 0;DATA.cluster.auto = 0;ts = now;if ~exist('E','var')    E = AllV.BoundaryFromCluster([],DATA.cluster, DATA.currentcluster);else    f = fields(DATA.cluster);    for j = 1:length(f)        if strmatch(f{j},{'sign'})         elseif ~isfield(E,f{j})            E.(f{j}) = DATA.cluster.(f{j});        end    endendif isfield(E,'bestcl')    DATA.gmcid = E.bestcl;endset(DATA.toplevel,'Name','Classifying Spikes...');drawnow;[cl, cluster, DATA.xy{DATA.currentcluster}] = AllV.ClassifySpikes(DATA,E,classargs{:});if DATA.checkclusters    AllV.CheckClusters(DataClusters, 'CheckNexts','Clasified');endif isfield(cluster,'r')%    cluster = rmfield(cluster,'r');endDATA.cluster = cluster;DATA.clusterboundary{DATA.currentcluster} = AllV.CondenseCluster(E);if isfield(cl,'MeanSpike')    if DATA.currentcluster == 1    DATA.cluster.MeanSpike = cl.MeanSpike;    else    DATA.cluster.next{DATA.currentcluster-1}.MeanSpike = cl.MeanSpike;    end    DATA.MeanSpike = cl.MeanSpike;end     if DATA.plot.expt         DATA.Expt = AllV.PlotExptCounts(DATA);     endif fcn == 11     if isfield(DATA.cluster,'distance')    AllV.SetFigure(DATA.tag.tmplscore, DATA);    plot(DATA.cluster.distance,r,'.','markersize',1);    endendDATA.clid = cl.id;DATA.nid = cl.nid;    DATA.clst = cl.clst;if ismember(fcn, [1 2 6 7 8 11 30])%cluster cut called from GUI, so replot    if isfield(cluster,'gmfit2dman') && cluster.gmfit2dman.Converged > -1        E.gmfit2dman = cluster.gmfit2dman;        E.mahal = cluster.mahal;    end    if DATA.watchplots == 0 || plotpcs%otherwise done in AllV.ClassifySpikes    DATA = AllV.ReplotPCs(DATA,DATA.cluster);    end    f = {'r' 'gmfit1d' 'fitdprime' 'fitdpparams'};    C = AllV.GetSubCluster(DATA.cluster, DATA.currentcluster);    for j = 1:length(f)        if isfield(C,f{j})            E.(f{j}) = C.(f{j});        end    end    AllV.PlotHistogram(DATA, E,classargs{:});  %? add a 'quick' option here too. But most often want the GM disp numberendmytoc(ts);if DATA.plot.expt    AllV.SetFigure(DATA.tag.Expt, DATA);    DATA.Expt = AllV.PlotExptCounts(DATA);endif DATA.profiling > 1endset(DATA.toplevel,'name',get(DATA.toplevel,'Tag'));set(DATA.toplevel,'UserData',DATA);figure(DATA.toplevel);