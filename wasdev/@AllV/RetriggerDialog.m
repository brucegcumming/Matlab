 function args = RetriggerDialog(a,b, fcn)        DATA = GetDataFromFig(a);        persistent trigargs;        persistent trigstate;                p = AllV.ProbeNumber(DATA);        if strcmp(fcn,'popup')        F = dialog('Name','Retrigger','resize','on');        a =uicontrol(F,'style','pushbutton','string','ReTrigger','callback',{@AllV.RetriggerDialog, 'go'});        b =uicontrol(F,'style','pushbutton','string','Cancel','callback',{@AllV.RetriggerDialog, 'cancel'});        AllV.PlaceUi(a,b,'up');        b =uicontrol(F,'style','pushbutton','string','SetSpkrate','callback',{@AllV.RetriggerDialog, 'setspkrate'});        AllV.PlaceUi(a,b,'left');        e = uicontrol(F,'style','pop','string','V|dVdt|accel|energy (dangerous)|Template|Templatedt','tag','trigtype');        trigstate.type = 1+DATA.trigdt;        set(e,'value',trigstate.type);        AllV.PlaceUi(b,e,'left');        c = uicontrol(F,'style','text','string','Threshold','tag','labelthrehsold');        AllV.PlaceUi(e,c,'left');        s = num2str(DATA.cluster.Trigger);        trigstate.Trigger = str2num(s);        d = uicontrol(F,'style','edit','string',s,'tag','threshold');        AllV.PlaceUi(c,d,'left');        aa =uicontrol(F,'style','text','string','Smooth','tag','labelthrehsold');        AllV.PlaceUi(c,aa,'up');        s = num2str(DATA.triggersmooth);        trigstate.smooth = str2num(s);        bb = uicontrol(F,'style','edit','string',s,'tag','smooth');        AllV.PlaceUi(aa,bb,'left');        e = uicontrol(F,'style','text','string','Spkrate','tag','labelspkrate');        AllV.PlaceUi(d,e,'left');        if isfield(DATA.cluster,'eventrate')            trigstate.spkrate = round(DATA.cluster.eventrate .* DATA.samplerate );        else            trigstate.spkrate = round(DATA.cluster.nspks./DATA.duration);        end        if trigstate.Trigger < 0            trigstate.spkrate = -trigstate.spkrate;        end        f = uicontrol(F,'style','edit','string',num2str(trigstate.spkrate),'tag','spkrate');        AllV.PlaceUi(e,f,'left');        AllV.FitWindow(F);        set(F,'UserData',DATA.toplevel);        uiwait(F);                args = trigargs;        elseif strcmp(fcn,'cancel')            args = {};            close(gcf);        elseif strcmp(fcn,'setspkrate')            F = get(a,'parent');            DATA.setspkrate = str2num(get(findobj(F,'tag','spkrate'),'string'));            set(DATA.toplevel,'UserData',DATA);        elseif strcmp(fcn,'go')            fprintf('Hit Retrigger Button\n');            F = get(a,'parent');            trigtypes = {'threshold','dtthr','dtthr2','dtthr3','triggertemplate','triggertemplatedt'};            trigtype = get(findobj(F,'tag','trigtype'),'value');            a = str2num(get(findobj(F,'tag','threshold'),'string'));            b = str2num(get(findobj(F,'tag','spkrate'),'string'));            if ismember(trigtype,[5 6])                if isfield(DATA.cluster,'MeanSpike')                    Ms = DATA.cluster.MeanSpike.ms;                else                    DataClusters = AllV.mygetappdata(DATA,'Clusters');                    Ms = DataClusters{p}.MeanSpike.ms;                end                npts = size(Ms,2);                spts = 16-npts:15;                trigargs  = {trigtypes{trigtype} Ms 'spts' spts};            else            trigargs  =  {trigtypes{trigtype }};            end% by default use spkrate to set trigger - hard to guess what you need for% other spaces.            if  a ~= trigstate.Trigger                trigargs = {trigargs{:} a};            else%                if trigtype == 1%                    trigargs = {};%                end                if b > 0                    trigargs = {trigargs{:} 'th+' 'spkrate', b};                else                    trigargs = {trigargs{:} 'th-' 'spkrate', -b};                end            end            a = str2num(get(findobj(F,'tag','smooth'),'string'));            trigargs = {trigargs{:} 'smooth' a};            if sum(strcmp(DATA.probeswitchmode,{'simple'}))%                trigargs = {trigargs{:} DATA.probeswitchmode};% can't really call re-trigger and simple. If plottype is template, then%need to recalculate scores                trigargs = {trigargs{:} 'reapply' DATA.cluster};            else                trigargs = {trigargs{:} 'reapply' DATA.cluster};            end            close(gcf);        end        